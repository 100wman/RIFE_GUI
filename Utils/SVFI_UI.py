# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'SVFI_UI.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1252, 849)
        MainWindow.setMinimumSize(QtCore.QSize(480, 270))
        MainWindow.setToolTip("")
        MainWindow.setDockOptions(QtWidgets.QMainWindow.AllowNestedDocks|QtWidgets.QMainWindow.AllowTabbedDocks|QtWidgets.QMainWindow.AnimatedDocks)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.MainFrame = QtWidgets.QFrame(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.MainFrame.sizePolicy().hasHeightForWidth())
        self.MainFrame.setSizePolicy(sizePolicy)
        self.MainFrame.setObjectName("MainFrame")
        self.gridLayout_18 = QtWidgets.QGridLayout(self.MainFrame)
        self.gridLayout_18.setObjectName("gridLayout_18")
        self.tabWidget = QtWidgets.QTabWidget(self.MainFrame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tabWidget.sizePolicy().hasHeightForWidth())
        self.tabWidget.setSizePolicy(sizePolicy)
        self.tabWidget.setElideMode(QtCore.Qt.ElideLeft)
        self.tabWidget.setObjectName("tabWidget")
        self.step1 = QtWidgets.QWidget()
        self.step1.setEnabled(True)
        self.step1.setObjectName("step1")
        self.gridLayout_19 = QtWidgets.QGridLayout(self.step1)
        self.gridLayout_19.setObjectName("gridLayout_19")
        self.splitter = QtWidgets.QSplitter(self.step1)
        self.splitter.setOrientation(QtCore.Qt.Horizontal)
        self.splitter.setOpaqueResize(True)
        self.splitter.setChildrenCollapsible(False)
        self.splitter.setObjectName("splitter")
        self.InputArea = QtWidgets.QWidget(self.splitter)
        self.InputArea.setObjectName("InputArea")
        self.gridLayout = QtWidgets.QGridLayout(self.InputArea)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.InputLabel = QtWidgets.QLabel(self.InputArea)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.InputLabel.sizePolicy().hasHeightForWidth())
        self.InputLabel.setSizePolicy(sizePolicy)
        self.InputLabel.setObjectName("InputLabel")
        self.horizontalLayout_7.addWidget(self.InputLabel)
        self.tutorialLinkButton = QtWidgets.QPushButton(self.InputArea)
        self.tutorialLinkButton.setObjectName("tutorialLinkButton")
        self.horizontalLayout_7.addWidget(self.tutorialLinkButton)
        self.ClearInputButton = QtWidgets.QPushButton(self.InputArea)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ClearInputButton.sizePolicy().hasHeightForWidth())
        self.ClearInputButton.setSizePolicy(sizePolicy)
        self.ClearInputButton.setObjectName("ClearInputButton")
        self.horizontalLayout_7.addWidget(self.ClearInputButton)
        self.gridLayout.addLayout(self.horizontalLayout_7, 0, 0, 1, 1)
        self.InputFileName = MyListWidget(self.InputArea)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.InputFileName.sizePolicy().hasHeightForWidth())
        self.InputFileName.setSizePolicy(sizePolicy)
        self.InputFileName.setMidLineWidth(-6)
        self.InputFileName.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustIgnored)
        self.InputFileName.setTabKeyNavigation(True)
        self.InputFileName.setDragEnabled(True)
        self.InputFileName.setDragDropOverwriteMode(True)
        self.InputFileName.setDragDropMode(QtWidgets.QAbstractItemView.DragDrop)
        self.InputFileName.setAlternatingRowColors(False)
        self.InputFileName.setViewMode(QtWidgets.QListView.ListMode)
        self.InputFileName.setObjectName("InputFileName")
        self.gridLayout.addWidget(self.InputFileName, 1, 0, 1, 1)
        self.OutputLabel = QtWidgets.QLabel(self.InputArea)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.OutputLabel.sizePolicy().hasHeightForWidth())
        self.OutputLabel.setSizePolicy(sizePolicy)
        self.OutputLabel.setObjectName("OutputLabel")
        self.gridLayout.addWidget(self.OutputLabel, 2, 0, 1, 1)
        self.OutputFolder = MyLineWidget(self.InputArea)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.OutputFolder.sizePolicy().hasHeightForWidth())
        self.OutputFolder.setSizePolicy(sizePolicy)
        self.OutputFolder.setDragEnabled(True)
        self.OutputFolder.setObjectName("OutputFolder")
        self.gridLayout.addWidget(self.OutputFolder, 3, 0, 1, 1)
        self.horizontalLayout_12 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        self.InputButton = QtWidgets.QPushButton(self.InputArea)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.InputButton.sizePolicy().hasHeightForWidth())
        self.InputButton.setSizePolicy(sizePolicy)
        self.InputButton.setObjectName("InputButton")
        self.horizontalLayout_12.addWidget(self.InputButton)
        self.InputDirButton = QtWidgets.QPushButton(self.InputArea)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.InputDirButton.sizePolicy().hasHeightForWidth())
        self.InputDirButton.setSizePolicy(sizePolicy)
        self.InputDirButton.setObjectName("InputDirButton")
        self.horizontalLayout_12.addWidget(self.InputDirButton)
        self.OutputButton = QtWidgets.QPushButton(self.InputArea)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.OutputButton.sizePolicy().hasHeightForWidth())
        self.OutputButton.setSizePolicy(sizePolicy)
        self.OutputButton.setObjectName("OutputButton")
        self.horizontalLayout_12.addWidget(self.OutputButton)
        self.ShowAdvance = QtWidgets.QPushButton(self.InputArea)
        self.ShowAdvance.setObjectName("ShowAdvance")
        self.horizontalLayout_12.addWidget(self.ShowAdvance)
        self.gridLayout.addLayout(self.horizontalLayout_12, 4, 0, 1, 1)
        self.groupBox = QtWidgets.QGroupBox(self.InputArea)
        self.groupBox.setTitle("")
        self.groupBox.setObjectName("groupBox")
        self.gridLayout_14 = QtWidgets.QGridLayout(self.groupBox)
        self.gridLayout_14.setObjectName("gridLayout_14")
        self.gridLayout_9 = QtWidgets.QGridLayout()
        self.gridLayout_9.setObjectName("gridLayout_9")
        self.UseNCNNButton = QtWidgets.QCheckBox(self.groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.UseNCNNButton.sizePolicy().hasHeightForWidth())
        self.UseNCNNButton.setSizePolicy(sizePolicy)
        self.UseNCNNButton.setObjectName("UseNCNNButton")
        self.gridLayout_9.addWidget(self.UseNCNNButton, 1, 1, 1, 1)
        self.label_12 = QtWidgets.QLabel(self.groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_12.sizePolicy().hasHeightForWidth())
        self.label_12.setSizePolicy(sizePolicy)
        self.label_12.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_12.setObjectName("label_12")
        self.gridLayout_9.addWidget(self.label_12, 1, 3, 1, 1)
        self.SaveAudioChecker = QtWidgets.QCheckBox(self.groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.SaveAudioChecker.sizePolicy().hasHeightForWidth())
        self.SaveAudioChecker.setSizePolicy(sizePolicy)
        self.SaveAudioChecker.setChecked(True)
        self.SaveAudioChecker.setObjectName("SaveAudioChecker")
        self.gridLayout_9.addWidget(self.SaveAudioChecker, 1, 0, 1, 1)
        self.ImgOutputChecker = QtWidgets.QCheckBox(self.groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ImgOutputChecker.sizePolicy().hasHeightForWidth())
        self.ImgOutputChecker.setSizePolicy(sizePolicy)
        self.ImgOutputChecker.setObjectName("ImgOutputChecker")
        self.gridLayout_9.addWidget(self.ImgOutputChecker, 1, 2, 1, 1)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setSizeConstraint(QtWidgets.QLayout.SetMaximumSize)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.gridLayout_9.addLayout(self.horizontalLayout_6, 5, 2, 1, 1)
        self.ExtSelector = MyComboBox(self.groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ExtSelector.sizePolicy().hasHeightForWidth())
        self.ExtSelector.setSizePolicy(sizePolicy)
        self.ExtSelector.setObjectName("ExtSelector")
        self.ExtSelector.addItem("")
        self.ExtSelector.addItem("")
        self.ExtSelector.addItem("")
        self.gridLayout_9.addWidget(self.ExtSelector, 1, 4, 1, 1)
        self.gridLayout_14.addLayout(self.gridLayout_9, 0, 0, 1, 1)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.InputFPSReminder = QtWidgets.QLabel(self.groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.InputFPSReminder.sizePolicy().hasHeightForWidth())
        self.InputFPSReminder.setSizePolicy(sizePolicy)
        self.InputFPSReminder.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.InputFPSReminder.setObjectName("InputFPSReminder")
        self.horizontalLayout.addWidget(self.InputFPSReminder)
        self.InputFPS = MyLineWidget(self.groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.InputFPS.sizePolicy().hasHeightForWidth())
        self.InputFPS.setSizePolicy(sizePolicy)
        self.InputFPS.setDragEnabled(True)
        self.InputFPS.setObjectName("InputFPS")
        self.horizontalLayout.addWidget(self.InputFPS)
        self.InterpExpReminder = QtWidgets.QRadioButton(self.groupBox)
        self.InterpExpReminder.setChecked(True)
        self.InterpExpReminder.setObjectName("InterpExpReminder")
        self.horizontalLayout.addWidget(self.InterpExpReminder)
        self.ExpSelecter = MyComboBox(self.groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ExpSelecter.sizePolicy().hasHeightForWidth())
        self.ExpSelecter.setSizePolicy(sizePolicy)
        self.ExpSelecter.setObjectName("ExpSelecter")
        self.ExpSelecter.addItem("")
        self.ExpSelecter.addItem("")
        self.ExpSelecter.addItem("")
        self.ExpSelecter.addItem("")
        self.ExpSelecter.addItem("")
        self.ExpSelecter.addItem("")
        self.ExpSelecter.addItem("")
        self.horizontalLayout.addWidget(self.ExpSelecter)
        self.OutputFPSReminder = QtWidgets.QRadioButton(self.groupBox)
        self.OutputFPSReminder.setChecked(False)
        self.OutputFPSReminder.setObjectName("OutputFPSReminder")
        self.horizontalLayout.addWidget(self.OutputFPSReminder)
        self.OutputFPS = MyLineWidget(self.groupBox)
        self.OutputFPS.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.OutputFPS.sizePolicy().hasHeightForWidth())
        self.OutputFPS.setSizePolicy(sizePolicy)
        self.OutputFPS.setDragEnabled(True)
        self.OutputFPS.setObjectName("OutputFPS")
        self.horizontalLayout.addWidget(self.OutputFPS)
        self.gridLayout_14.addLayout(self.horizontalLayout, 1, 0, 1, 1)
        self.gridLayout.addWidget(self.groupBox, 5, 0, 1, 1)
        self.SettingsPresetGroup = QtWidgets.QGroupBox(self.InputArea)
        self.SettingsPresetGroup.setTitle("")
        self.SettingsPresetGroup.setObjectName("SettingsPresetGroup")
        self.gridLayout_35 = QtWidgets.QGridLayout(self.SettingsPresetGroup)
        self.gridLayout_35.setObjectName("gridLayout_35")
        self.SettingsPresetsFluency = MyComboBox(self.SettingsPresetGroup)
        self.SettingsPresetsFluency.setObjectName("SettingsPresetsFluency")
        self.SettingsPresetsFluency.addItem("")
        self.SettingsPresetsFluency.addItem("")
        self.SettingsPresetsFluency.addItem("")
        self.gridLayout_35.addWidget(self.SettingsPresetsFluency, 0, 3, 1, 1)
        self.SettingsPresetsApplyButton = QtWidgets.QPushButton(self.SettingsPresetGroup)
        self.SettingsPresetsApplyButton.setObjectName("SettingsPresetsApplyButton")
        self.gridLayout_35.addWidget(self.SettingsPresetsApplyButton, 0, 0, 1, 1)
        self.SettingsPresetsInputs = MyComboBox(self.SettingsPresetGroup)
        self.SettingsPresetsInputs.setObjectName("SettingsPresetsInputs")
        self.SettingsPresetsInputs.addItem("")
        self.SettingsPresetsInputs.addItem("")
        self.gridLayout_35.addWidget(self.SettingsPresetsInputs, 0, 1, 1, 1)
        self.SettingsPresetsSQ = MyComboBox(self.SettingsPresetGroup)
        self.SettingsPresetsSQ.setObjectName("SettingsPresetsSQ")
        self.SettingsPresetsSQ.addItem("")
        self.SettingsPresetsSQ.addItem("")
        self.SettingsPresetsSQ.addItem("")
        self.SettingsPresetsSQ.addItem("")
        self.gridLayout_35.addWidget(self.SettingsPresetsSQ, 0, 2, 1, 1)
        self.gridLayout.addWidget(self.SettingsPresetGroup, 6, 0, 1, 1)
        self.ShortCutGroup = QtWidgets.QWidget(self.InputArea)
        self.ShortCutGroup.setObjectName("ShortCutGroup")
        self.ShortCutLayout = QtWidgets.QGridLayout(self.ShortCutGroup)
        self.ShortCutLayout.setObjectName("ShortCutLayout")
        self.presetActionButton = QtWidgets.QPushButton(self.ShortCutGroup)
        self.presetActionButton.setObjectName("presetActionButton")
        self.ShortCutLayout.addWidget(self.presetActionButton, 0, 7, 1, 1)
        self.resolutionActionButton = QtWidgets.QPushButton(self.ShortCutGroup)
        self.resolutionActionButton.setObjectName("resolutionActionButton")
        self.ShortCutLayout.addWidget(self.resolutionActionButton, 0, 4, 1, 1)
        self.homeActionButton = QtWidgets.QPushButton(self.ShortCutGroup)
        self.homeActionButton.setObjectName("homeActionButton")
        self.ShortCutLayout.addWidget(self.homeActionButton, 0, 0, 1, 1)
        self.outputActionButton = QtWidgets.QPushButton(self.ShortCutGroup)
        self.outputActionButton.setObjectName("outputActionButton")
        self.ShortCutLayout.addWidget(self.outputActionButton, 0, 1, 1, 1)
        self.rifeActionButton = QtWidgets.QPushButton(self.ShortCutGroup)
        self.rifeActionButton.setObjectName("rifeActionButton")
        self.ShortCutLayout.addWidget(self.rifeActionButton, 0, 6, 1, 1)
        self.renderActionButton = QtWidgets.QPushButton(self.ShortCutGroup)
        self.renderActionButton.setObjectName("renderActionButton")
        self.ShortCutLayout.addWidget(self.renderActionButton, 0, 5, 1, 1)
        self.resumeActionButton = QtWidgets.QPushButton(self.ShortCutGroup)
        self.resumeActionButton.setObjectName("resumeActionButton")
        self.ShortCutLayout.addWidget(self.resumeActionButton, 0, 2, 1, 1)
        self.scdetActionButton = QtWidgets.QPushButton(self.ShortCutGroup)
        self.scdetActionButton.setObjectName("scdetActionButton")
        self.ShortCutLayout.addWidget(self.scdetActionButton, 0, 3, 1, 1)
        self.toolboxActionButton = QtWidgets.QPushButton(self.ShortCutGroup)
        self.toolboxActionButton.setObjectName("toolboxActionButton")
        self.ShortCutLayout.addWidget(self.toolboxActionButton, 0, 8, 1, 1)
        self.gridLayout.addWidget(self.ShortCutGroup, 7, 0, 1, 1)
        self.horizontalLayout_20 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_20.setObjectName("horizontalLayout_20")
        self.StartExtractButton = QtWidgets.QPushButton(self.InputArea)
        self.StartExtractButton.setObjectName("StartExtractButton")
        self.horizontalLayout_20.addWidget(self.StartExtractButton)
        self.AllInOne = QtWidgets.QPushButton(self.InputArea)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.AllInOne.sizePolicy().hasHeightForWidth())
        self.AllInOne.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Abril Fatface")
        font.setPointSize(9)
        self.AllInOne.setFont(font)
        self.AllInOne.setObjectName("AllInOne")
        self.horizontalLayout_20.addWidget(self.AllInOne)
        self.StartRenderButton = QtWidgets.QPushButton(self.InputArea)
        self.StartRenderButton.setObjectName("StartRenderButton")
        self.horizontalLayout_20.addWidget(self.StartRenderButton)
        self.gridLayout.addLayout(self.horizontalLayout_20, 8, 0, 1, 1)
        self.AdvanceArea = QtWidgets.QWidget(self.splitter)
        self.AdvanceArea.setMinimumSize(QtCore.QSize(0, 0))
        self.AdvanceArea.setMaximumSize(QtCore.QSize(2333333, 16777215))
        self.AdvanceArea.setObjectName("AdvanceArea")
        self.gridLayout_17 = QtWidgets.QGridLayout(self.AdvanceArea)
        self.gridLayout_17.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_17.setObjectName("gridLayout_17")
        self.AdvanceSettingsArea = QtWidgets.QScrollArea(self.AdvanceArea)
        self.AdvanceSettingsArea.setMinimumSize(QtCore.QSize(400, 0))
        self.AdvanceSettingsArea.setMaximumSize(QtCore.QSize(600, 16777215))
        self.AdvanceSettingsArea.setStyleSheet("")
        self.AdvanceSettingsArea.setWidgetResizable(True)
        self.AdvanceSettingsArea.setObjectName("AdvanceSettingsArea")
        self.AdvanceSettingsAreaWidget = QtWidgets.QWidget()
        self.AdvanceSettingsAreaWidget.setGeometry(QtCore.QRect(0, 0, 400, 728))
        self.AdvanceSettingsAreaWidget.setObjectName("AdvanceSettingsAreaWidget")
        self.gridLayout_10 = QtWidgets.QGridLayout(self.AdvanceSettingsAreaWidget)
        self.gridLayout_10.setObjectName("gridLayout_10")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout()
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.SaveCurrentSettings = QtWidgets.QPushButton(self.AdvanceSettingsAreaWidget)
        self.SaveCurrentSettings.setObjectName("SaveCurrentSettings")
        self.verticalLayout_8.addWidget(self.SaveCurrentSettings)
        self.LoadCurrentSettings = QtWidgets.QPushButton(self.AdvanceSettingsAreaWidget)
        self.LoadCurrentSettings.setObjectName("LoadCurrentSettings")
        self.verticalLayout_8.addWidget(self.LoadCurrentSettings)
        self.OutputSettingsButton = QtWidgets.QPushButton(self.AdvanceSettingsAreaWidget)
        self.OutputSettingsButton.setObjectName("OutputSettingsButton")
        self.verticalLayout_8.addWidget(self.OutputSettingsButton)
        self.DebugChecker = QtWidgets.QCheckBox(self.AdvanceSettingsAreaWidget)
        self.DebugChecker.setObjectName("DebugChecker")
        self.verticalLayout_8.addWidget(self.DebugChecker)
        self.gridLayout_10.addLayout(self.verticalLayout_8, 4, 0, 1, 1)
        self.AdvanceSettingsLabel = QtWidgets.QLabel(self.AdvanceSettingsAreaWidget)
        self.AdvanceSettingsLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.AdvanceSettingsLabel.setObjectName("AdvanceSettingsLabel")
        self.gridLayout_10.addWidget(self.AdvanceSettingsLabel, 0, 0, 1, 1)
        self.toolBox = QtWidgets.QToolBox(self.AdvanceSettingsAreaWidget)
        self.toolBox.setMaximumSize(QtCore.QSize(800, 16777215))
        self.toolBox.setObjectName("toolBox")
        self.ResumeSettings = QtWidgets.QWidget()
        self.ResumeSettings.setGeometry(QtCore.QRect(0, 0, 382, 399))
        self.ResumeSettings.setObjectName("ResumeSettings")
        self.gridLayout_13 = QtWidgets.QGridLayout(self.ResumeSettings)
        self.gridLayout_13.setObjectName("gridLayout_13")
        self.groupBox_2 = QtWidgets.QGroupBox(self.ResumeSettings)
        self.groupBox_2.setTitle("")
        self.groupBox_2.setObjectName("groupBox_2")
        self.gridLayout_15 = QtWidgets.QGridLayout(self.groupBox_2)
        self.gridLayout_15.setObjectName("gridLayout_15")
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_15.addItem(spacerItem, 2, 0, 1, 1)
        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.EndPoint = QtWidgets.QTimeEdit(self.groupBox_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.EndPoint.sizePolicy().hasHeightForWidth())
        self.EndPoint.setSizePolicy(sizePolicy)
        self.EndPoint.setMinimumSize(QtCore.QSize(100, 0))
        self.EndPoint.setMaximumSize(QtCore.QSize(150, 16777215))
        self.EndPoint.setCurrentSection(QtWidgets.QDateTimeEdit.HourSection)
        self.EndPoint.setObjectName("EndPoint")
        self.gridLayout_2.addWidget(self.EndPoint, 3, 2, 1, 1)
        self.label_22 = QtWidgets.QLabel(self.groupBox_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_22.sizePolicy().hasHeightForWidth())
        self.label_22.setSizePolicy(sizePolicy)
        self.label_22.setMinimumSize(QtCore.QSize(100, 0))
        self.label_22.setMaximumSize(QtCore.QSize(150, 16777215))
        self.label_22.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_22.setObjectName("label_22")
        self.gridLayout_2.addWidget(self.label_22, 5, 0, 1, 1)
        self.label_21 = QtWidgets.QLabel(self.groupBox_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_21.sizePolicy().hasHeightForWidth())
        self.label_21.setSizePolicy(sizePolicy)
        self.label_21.setMinimumSize(QtCore.QSize(100, 0))
        self.label_21.setMaximumSize(QtCore.QSize(150, 16777215))
        self.label_21.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_21.setObjectName("label_21")
        self.gridLayout_2.addWidget(self.label_21, 6, 0, 1, 1)
        self.EndPointLabel = QtWidgets.QLabel(self.groupBox_2)
        self.EndPointLabel.setMinimumSize(QtCore.QSize(100, 0))
        self.EndPointLabel.setMaximumSize(QtCore.QSize(200, 16777215))
        self.EndPointLabel.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.EndPointLabel.setObjectName("EndPointLabel")
        self.gridLayout_2.addWidget(self.EndPointLabel, 3, 0, 1, 1)
        self.StartPoint = QtWidgets.QTimeEdit(self.groupBox_2)
        self.StartPoint.setMinimumSize(QtCore.QSize(100, 0))
        self.StartPoint.setMaximumSize(QtCore.QSize(150, 16777215))
        self.StartPoint.setCurrentSection(QtWidgets.QDateTimeEdit.HourSection)
        self.StartPoint.setObjectName("StartPoint")
        self.gridLayout_2.addWidget(self.StartPoint, 2, 2, 1, 1)
        self.AutoSet = QtWidgets.QPushButton(self.groupBox_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.AutoSet.sizePolicy().hasHeightForWidth())
        self.AutoSet.setSizePolicy(sizePolicy)
        self.AutoSet.setObjectName("AutoSet")
        self.gridLayout_2.addWidget(self.AutoSet, 1, 2, 1, 1)
        self.AutoSetReminder = QtWidgets.QLabel(self.groupBox_2)
        self.AutoSetReminder.setMinimumSize(QtCore.QSize(100, 0))
        self.AutoSetReminder.setMaximumSize(QtCore.QSize(150, 16777215))
        self.AutoSetReminder.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.AutoSetReminder.setObjectName("AutoSetReminder")
        self.gridLayout_2.addWidget(self.AutoSetReminder, 1, 0, 1, 1)
        self.StartPointLabel = QtWidgets.QLabel(self.groupBox_2)
        self.StartPointLabel.setMinimumSize(QtCore.QSize(100, 0))
        self.StartPointLabel.setMaximumSize(QtCore.QSize(200, 16777215))
        self.StartPointLabel.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.StartPointLabel.setObjectName("StartPointLabel")
        self.gridLayout_2.addWidget(self.StartPointLabel, 2, 0, 1, 1)
        self.StartFrame = MySpinBox(self.groupBox_2)
        self.StartFrame.setMinimum(-1)
        self.StartFrame.setMaximum(999999999)
        self.StartFrame.setObjectName("StartFrame")
        self.gridLayout_2.addWidget(self.StartFrame, 6, 2, 1, 1)
        self.StartChunk = MySpinBox(self.groupBox_2)
        self.StartChunk.setMinimum(-1)
        self.StartChunk.setMaximum(999999999)
        self.StartChunk.setObjectName("StartChunk")
        self.gridLayout_2.addWidget(self.StartChunk, 5, 2, 1, 1)
        self.RefreshStartInfo = QtWidgets.QPushButton(self.groupBox_2)
        self.RefreshStartInfo.setObjectName("RefreshStartInfo")
        self.gridLayout_2.addWidget(self.RefreshStartInfo, 7, 0, 1, 1)
        self.ResumeRiskChecker = QtWidgets.QCheckBox(self.groupBox_2)
        self.ResumeRiskChecker.setChecked(False)
        self.ResumeRiskChecker.setObjectName("ResumeRiskChecker")
        self.gridLayout_2.addWidget(self.ResumeRiskChecker, 7, 2, 1, 1)
        self.gridLayout_15.addLayout(self.gridLayout_2, 0, 0, 1, 1)
        self.gridLayout_13.addWidget(self.groupBox_2, 0, 0, 1, 1)
        self.toolBox.addItem(self.ResumeSettings, "")
        self.ScdetSettings = QtWidgets.QWidget()
        self.ScdetSettings.setGeometry(QtCore.QRect(0, 0, 382, 399))
        self.ScdetSettings.setObjectName("ScdetSettings")
        self.gridLayout_22 = QtWidgets.QGridLayout(self.ScdetSettings)
        self.gridLayout_22.setObjectName("gridLayout_22")
        self.groupBox_3 = QtWidgets.QGroupBox(self.ScdetSettings)
        self.groupBox_3.setTitle("")
        self.groupBox_3.setObjectName("groupBox_3")
        self.gridLayout_20 = QtWidgets.QGridLayout(self.groupBox_3)
        self.gridLayout_20.setObjectName("gridLayout_20")
        self.horizontalLayout_14 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_14.setObjectName("horizontalLayout_14")
        self.ScdetModeLabel = QtWidgets.QLabel(self.groupBox_3)
        self.ScdetModeLabel.setObjectName("ScdetModeLabel")
        self.horizontalLayout_14.addWidget(self.ScdetModeLabel)
        self.ScdetMode = QtWidgets.QComboBox(self.groupBox_3)
        self.ScdetMode.setObjectName("ScdetMode")
        self.ScdetMode.addItem("")
        self.ScdetMode.addItem("")
        self.horizontalLayout_14.addWidget(self.ScdetMode)
        self.gridLayout_20.addLayout(self.horizontalLayout_14, 0, 0, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_20.addItem(spacerItem1, 3, 0, 1, 1)
        self.gridLayout_3 = QtWidgets.QGridLayout()
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.ScedetChecker = QtWidgets.QCheckBox(self.groupBox_3)
        self.ScedetChecker.setChecked(True)
        self.ScedetChecker.setObjectName("ScedetChecker")
        self.gridLayout_3.addWidget(self.ScedetChecker, 0, 0, 1, 1)
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.DupRmMode = MyComboBox(self.groupBox_3)
        self.DupRmMode.setToolTip("")
        self.DupRmMode.setObjectName("DupRmMode")
        self.DupRmMode.addItem("")
        self.DupRmMode.addItem("")
        self.DupRmMode.addItem("")
        self.DupRmMode.addItem("")
        self.DupRmMode.addItem("")
        self.DupRmMode.addItem("")
        self.DupRmMode.addItem("")
        self.DupRmMode.addItem("")
        self.horizontalLayout_8.addWidget(self.DupRmMode)
        self.DupFramesTSelector = MyDoubleSpinBox(self.groupBox_3)
        self.DupFramesTSelector.setMinimum(0.01)
        self.DupFramesTSelector.setMaximum(99.0)
        self.DupFramesTSelector.setProperty("value", 2.0)
        self.DupFramesTSelector.setObjectName("DupFramesTSelector")
        self.horizontalLayout_8.addWidget(self.DupFramesTSelector)
        self.UseSobelChecker = QtWidgets.QCheckBox(self.groupBox_3)
        self.UseSobelChecker.setObjectName("UseSobelChecker")
        self.horizontalLayout_8.addWidget(self.UseSobelChecker)
        self.gridLayout_3.addLayout(self.horizontalLayout_8, 4, 0, 1, 2)
        self.DupRmLabel = QtWidgets.QLabel(self.groupBox_3)
        self.DupRmLabel.setObjectName("DupRmLabel")
        self.gridLayout_3.addWidget(self.DupRmLabel, 3, 0, 1, 1)
        self.ScdetUseMix = QtWidgets.QCheckBox(self.groupBox_3)
        self.ScdetUseMix.setObjectName("ScdetUseMix")
        self.gridLayout_3.addWidget(self.ScdetUseMix, 5, 0, 1, 1)
        self.ScdetOutput = QtWidgets.QCheckBox(self.groupBox_3)
        self.ScdetOutput.setChecked(True)
        self.ScdetOutput.setObjectName("ScdetOutput")
        self.gridLayout_3.addWidget(self.ScdetOutput, 6, 0, 1, 1)
        self.ScdetMaxDiffSelector = MySpinBox(self.groupBox_3)
        self.ScdetMaxDiffSelector.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ScdetMaxDiffSelector.sizePolicy().hasHeightForWidth())
        self.ScdetMaxDiffSelector.setSizePolicy(sizePolicy)
        self.ScdetMaxDiffSelector.setMinimum(1)
        self.ScdetMaxDiffSelector.setMaximum(999)
        self.ScdetMaxDiffSelector.setProperty("value", 20)
        self.ScdetMaxDiffSelector.setObjectName("ScdetMaxDiffSelector")
        self.gridLayout_3.addWidget(self.ScdetMaxDiffSelector, 2, 1, 1, 1)
        self.UseFixedScdet = QtWidgets.QCheckBox(self.groupBox_3)
        self.UseFixedScdet.setObjectName("UseFixedScdet")
        self.gridLayout_3.addWidget(self.UseFixedScdet, 2, 0, 1, 1)
        self.horizontalLayout_16 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_16.setObjectName("horizontalLayout_16")
        self.ScdetSelector = MySpinBox(self.groupBox_3)
        self.ScdetSelector.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ScdetSelector.sizePolicy().hasHeightForWidth())
        self.ScdetSelector.setSizePolicy(sizePolicy)
        self.ScdetSelector.setMinimum(1)
        self.ScdetSelector.setMaximum(999)
        self.ScdetSelector.setProperty("value", 12)
        self.ScdetSelector.setObjectName("ScdetSelector")
        self.horizontalLayout_16.addWidget(self.ScdetSelector)
        self.ScdetFlowLen = QtWidgets.QComboBox(self.groupBox_3)
        self.ScdetFlowLen.setObjectName("ScdetFlowLen")
        self.ScdetFlowLen.addItem("")
        self.ScdetFlowLen.addItem("")
        self.horizontalLayout_16.addWidget(self.ScdetFlowLen)
        self.gridLayout_3.addLayout(self.horizontalLayout_16, 1, 0, 1, 2)
        self.gridLayout_20.addLayout(self.gridLayout_3, 1, 0, 1, 1)
        self.gridLayout_22.addWidget(self.groupBox_3, 0, 0, 1, 1)
        self.toolBox.addItem(self.ScdetSettings, "")
        self.OutputResizeSettings = QtWidgets.QWidget()
        self.OutputResizeSettings.setGeometry(QtCore.QRect(0, 0, 368, 493))
        self.OutputResizeSettings.setObjectName("OutputResizeSettings")
        self.gridLayout_28 = QtWidgets.QGridLayout(self.OutputResizeSettings)
        self.gridLayout_28.setObjectName("gridLayout_28")
        self.SrField = QtWidgets.QGroupBox(self.OutputResizeSettings)
        self.SrField.setTitle("")
        self.SrField.setObjectName("SrField")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.SrField)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label_8 = QtWidgets.QLabel(self.SrField)
        self.label_8.setScaledContents(False)
        self.label_8.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_8.setObjectName("label_8")
        self.verticalLayout_2.addWidget(self.label_8)
        self.AiSrSelector = MyComboBox(self.SrField)
        self.AiSrSelector.setObjectName("AiSrSelector")
        self.AiSrSelector.addItem("")
        self.AiSrSelector.addItem("")
        self.verticalLayout_2.addWidget(self.AiSrSelector)
        self.label_9 = QtWidgets.QLabel(self.SrField)
        self.label_9.setAcceptDrops(False)
        self.label_9.setScaledContents(False)
        self.label_9.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_9.setObjectName("label_9")
        self.verticalLayout_2.addWidget(self.label_9)
        self.AiSrModelSelector = MyComboBox(self.SrField)
        self.AiSrModelSelector.setObjectName("AiSrModelSelector")
        self.verticalLayout_2.addWidget(self.AiSrModelSelector)
        self.horizontalLayout_24 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_24.setObjectName("horizontalLayout_24")
        self.AiSrModuleExpReminder = QtWidgets.QLabel(self.SrField)
        self.AiSrModuleExpReminder.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.AiSrModuleExpReminder.setObjectName("AiSrModuleExpReminder")
        self.horizontalLayout_24.addWidget(self.AiSrModuleExpReminder)
        self.AiSrModuleExpDisplay = QtWidgets.QLabel(self.SrField)
        self.AiSrModuleExpDisplay.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.AiSrModuleExpDisplay.setObjectName("AiSrModuleExpDisplay")
        self.horizontalLayout_24.addWidget(self.AiSrModuleExpDisplay)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_24.addItem(spacerItem2)
        self.verticalLayout_2.addLayout(self.horizontalLayout_24)
        self.horizontalLayout_22 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_22.setObjectName("horizontalLayout_22")
        self.AiSrTransferResolution = QtWidgets.QLabel(self.SrField)
        self.AiSrTransferResolution.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.AiSrTransferResolution.setObjectName("AiSrTransferResolution")
        self.horizontalLayout_22.addWidget(self.AiSrTransferResolution)
        self.TransferRatioSettings = MyComboBox(self.SrField)
        self.TransferRatioSettings.setObjectName("TransferRatioSettings")
        self.TransferRatioSettings.addItem("")
        self.TransferRatioSettings.addItem("")
        self.TransferRatioSettings.addItem("")
        self.TransferRatioSettings.addItem("")
        self.TransferRatioSettings.addItem("")
        self.horizontalLayout_22.addWidget(self.TransferRatioSettings)
        self.verticalLayout_2.addLayout(self.horizontalLayout_22)
        self.SrModeLabel = QtWidgets.QLabel(self.SrField)
        self.SrModeLabel.setScaledContents(False)
        self.SrModeLabel.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.SrModeLabel.setObjectName("SrModeLabel")
        self.verticalLayout_2.addWidget(self.SrModeLabel)
        self.AiSrMode = MyComboBox(self.SrField)
        self.AiSrMode.setObjectName("AiSrMode")
        self.AiSrMode.addItem("")
        self.AiSrMode.addItem("")
        self.verticalLayout_2.addWidget(self.AiSrMode)
        self.TileSizeLabel = QtWidgets.QLabel(self.SrField)
        self.TileSizeLabel.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.TileSizeLabel.setObjectName("TileSizeLabel")
        self.verticalLayout_2.addWidget(self.TileSizeLabel)
        self.SrTileSizeSettings = MyComboBox(self.SrField)
        self.SrTileSizeSettings.setObjectName("SrTileSizeSettings")
        self.SrTileSizeSettings.addItem("")
        self.SrTileSizeSettings.addItem("")
        self.SrTileSizeSettings.addItem("")
        self.SrTileSizeSettings.addItem("")
        self.SrTileSizeSettings.addItem("")
        self.SrTileSizeSettings.addItem("")
        self.SrTileSizeSettings.addItem("")
        self.verticalLayout_2.addWidget(self.SrTileSizeSettings)
        self.SrTileSizeSelector = MySpinBox(self.SrField)
        self.SrTileSizeSelector.setMinimum(0)
        self.SrTileSizeSelector.setMaximum(100000)
        self.SrTileSizeSelector.setSingleStep(50)
        self.SrTileSizeSelector.setProperty("value", 400)
        self.SrTileSizeSelector.setObjectName("SrTileSizeSelector")
        self.verticalLayout_2.addWidget(self.SrTileSizeSelector)
        self.RealESRFp16Checker = QtWidgets.QCheckBox(self.SrField)
        self.RealESRFp16Checker.setObjectName("RealESRFp16Checker")
        self.verticalLayout_2.addWidget(self.RealESRFp16Checker)
        self.gridLayout_28.addWidget(self.SrField, 2, 0, 1, 1)
        self.UseAiSR = QtWidgets.QCheckBox(self.OutputResizeSettings)
        self.UseAiSR.setObjectName("UseAiSR")
        self.gridLayout_28.addWidget(self.UseAiSR, 1, 0, 1, 1)
        spacerItem3 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_28.addItem(spacerItem3, 3, 0, 1, 1)
        self.groupBox_4 = QtWidgets.QGroupBox(self.OutputResizeSettings)
        self.groupBox_4.setTitle("")
        self.groupBox_4.setObjectName("groupBox_4")
        self.gridLayout_21 = QtWidgets.QGridLayout(self.groupBox_4)
        self.gridLayout_21.setObjectName("gridLayout_21")
        self.ResizeTemplate = MyComboBox(self.groupBox_4)
        self.ResizeTemplate.setObjectName("ResizeTemplate")
        self.ResizeTemplate.addItem("")
        self.ResizeTemplate.addItem("")
        self.ResizeTemplate.addItem("")
        self.ResizeTemplate.addItem("")
        self.ResizeTemplate.addItem("")
        self.ResizeTemplate.addItem("")
        self.ResizeTemplate.addItem("")
        self.ResizeTemplate.addItem("")
        self.ResizeTemplate.addItem("")
        self.ResizeTemplate.addItem("")
        self.ResizeTemplate.addItem("")
        self.gridLayout_21.addWidget(self.ResizeTemplate, 1, 0, 1, 1)
        self.gridLayout_4 = QtWidgets.QGridLayout()
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.CropReminder = QtWidgets.QLabel(self.groupBox_4)
        self.CropReminder.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.CropReminder.setObjectName("CropReminder")
        self.gridLayout_4.addWidget(self.CropReminder, 5, 0, 1, 1)
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.label_5 = QtWidgets.QLabel(self.groupBox_4)
        self.label_5.setAlignment(QtCore.Qt.AlignCenter)
        self.label_5.setObjectName("label_5")
        self.horizontalLayout_11.addWidget(self.label_5)
        self.CropHeightSettings = MySpinBox(self.groupBox_4)
        self.CropHeightSettings.setMinimum(0)
        self.CropHeightSettings.setMaximum(100000)
        self.CropHeightSettings.setProperty("value", 0)
        self.CropHeightSettings.setObjectName("CropHeightSettings")
        self.horizontalLayout_11.addWidget(self.CropHeightSettings)
        self.gridLayout_4.addLayout(self.horizontalLayout_11, 6, 1, 1, 1)
        self.horizontalLayout_13 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        self.label_7 = QtWidgets.QLabel(self.groupBox_4)
        self.label_7.setAlignment(QtCore.Qt.AlignCenter)
        self.label_7.setObjectName("label_7")
        self.horizontalLayout_13.addWidget(self.label_7)
        self.CropWidthpSettings = MySpinBox(self.groupBox_4)
        self.CropWidthpSettings.setMaximum(100000)
        self.CropWidthpSettings.setObjectName("CropWidthpSettings")
        self.horizontalLayout_13.addWidget(self.CropWidthpSettings)
        self.gridLayout_4.addLayout(self.horizontalLayout_13, 6, 0, 1, 1)
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.label_4 = QtWidgets.QLabel(self.groupBox_4)
        self.label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.label_4.setObjectName("label_4")
        self.horizontalLayout_10.addWidget(self.label_4)
        self.ResizeHeightSettings = MySpinBox(self.groupBox_4)
        self.ResizeHeightSettings.setMaximum(100000)
        self.ResizeHeightSettings.setObjectName("ResizeHeightSettings")
        self.horizontalLayout_10.addWidget(self.ResizeHeightSettings)
        self.gridLayout_4.addLayout(self.horizontalLayout_10, 1, 1, 1, 1)
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.label_3 = QtWidgets.QLabel(self.groupBox_4)
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_9.addWidget(self.label_3)
        self.ResizeWidthSettings = MySpinBox(self.groupBox_4)
        self.ResizeWidthSettings.setMaximum(100000)
        self.ResizeWidthSettings.setObjectName("ResizeWidthSettings")
        self.horizontalLayout_9.addWidget(self.ResizeWidthSettings)
        self.gridLayout_4.addLayout(self.horizontalLayout_9, 1, 0, 1, 1)
        self.LockWHChecker = QtWidgets.QCheckBox(self.groupBox_4)
        self.LockWHChecker.setObjectName("LockWHChecker")
        self.gridLayout_4.addWidget(self.LockWHChecker, 0, 1, 1, 1)
        self.ResizeReminder = QtWidgets.QLabel(self.groupBox_4)
        self.ResizeReminder.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.ResizeReminder.setObjectName("ResizeReminder")
        self.gridLayout_4.addWidget(self.ResizeReminder, 0, 0, 1, 1)
        self.gridLayout_21.addLayout(self.gridLayout_4, 2, 0, 1, 1)
        self.ResizePresetsReminder = QtWidgets.QLabel(self.groupBox_4)
        self.ResizePresetsReminder.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.ResizePresetsReminder.setObjectName("ResizePresetsReminder")
        self.gridLayout_21.addWidget(self.ResizePresetsReminder, 0, 0, 1, 1)
        self.gridLayout_28.addWidget(self.groupBox_4, 0, 0, 1, 1)
        self.toolBox.addItem(self.OutputResizeSettings, "")
        self.RenderSettings = QtWidgets.QWidget()
        self.RenderSettings.setGeometry(QtCore.QRect(0, 0, 368, 784))
        self.RenderSettings.setObjectName("RenderSettings")
        self.gridLayout_29 = QtWidgets.QGridLayout(self.RenderSettings)
        self.gridLayout_29.setObjectName("gridLayout_29")
        self.horizontalLayout_28 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_28.setObjectName("horizontalLayout_28")
        self.BufferSizeSelector = MySpinBox(self.RenderSettings)
        self.BufferSizeSelector.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.BufferSizeSelector.sizePolicy().hasHeightForWidth())
        self.BufferSizeSelector.setSizePolicy(sizePolicy)
        self.BufferSizeSelector.setMinimum(1)
        self.BufferSizeSelector.setMaximum(500)
        self.BufferSizeSelector.setSingleStep(1)
        self.BufferSizeSelector.setProperty("value", 1)
        self.BufferSizeSelector.setObjectName("BufferSizeSelector")
        self.horizontalLayout_28.addWidget(self.BufferSizeSelector)
        self.label_28 = QtWidgets.QLabel(self.RenderSettings)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_28.sizePolicy().hasHeightForWidth())
        self.label_28.setSizePolicy(sizePolicy)
        self.label_28.setAlignment(QtCore.Qt.AlignCenter)
        self.label_28.setObjectName("label_28")
        self.horizontalLayout_28.addWidget(self.label_28)
        self.gridLayout_29.addLayout(self.horizontalLayout_28, 5, 0, 1, 1)
        self.groupBox_7 = QtWidgets.QGroupBox(self.RenderSettings)
        self.groupBox_7.setTitle("")
        self.groupBox_7.setObjectName("groupBox_7")
        self.gridLayout_32 = QtWidgets.QGridLayout(self.groupBox_7)
        self.gridLayout_32.setObjectName("gridLayout_32")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.BitrateSelector = MyDoubleSpinBox(self.groupBox_7)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.BitrateSelector.sizePolicy().hasHeightForWidth())
        self.BitrateSelector.setSizePolicy(sizePolicy)
        self.BitrateSelector.setMaximum(1000000.0)
        self.BitrateSelector.setProperty("value", 90.0)
        self.BitrateSelector.setObjectName("BitrateSelector")
        self.horizontalLayout_4.addWidget(self.BitrateSelector)
        self.TargetBitrateMeasure = QtWidgets.QLabel(self.groupBox_7)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.TargetBitrateMeasure.sizePolicy().hasHeightForWidth())
        self.TargetBitrateMeasure.setSizePolicy(sizePolicy)
        self.TargetBitrateMeasure.setObjectName("TargetBitrateMeasure")
        self.horizontalLayout_4.addWidget(self.TargetBitrateMeasure)
        self.gridLayout_32.addLayout(self.horizontalLayout_4, 1, 1, 1, 1)
        self.PresetSelector = MyComboBox(self.groupBox_7)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.PresetSelector.sizePolicy().hasHeightForWidth())
        self.PresetSelector.setSizePolicy(sizePolicy)
        self.PresetSelector.setObjectName("PresetSelector")
        self.PresetSelector.addItem("")
        self.gridLayout_32.addWidget(self.PresetSelector, 4, 1, 1, 1)
        self.HwaccelSelector = MyComboBox(self.groupBox_7)
        self.HwaccelSelector.setToolTip("")
        self.HwaccelSelector.setObjectName("HwaccelSelector")
        self.HwaccelSelector.addItem("")
        self.HwaccelSelector.addItem("")
        self.HwaccelSelector.addItem("")
        self.HwaccelSelector.addItem("")
        self.HwaccelSelector.addItem("")
        self.gridLayout_32.addWidget(self.HwaccelSelector, 2, 1, 1, 1)
        self.DefaultEncodePresetChecker = QtWidgets.QCheckBox(self.groupBox_7)
        self.DefaultEncodePresetChecker.setChecked(True)
        self.DefaultEncodePresetChecker.setObjectName("DefaultEncodePresetChecker")
        self.gridLayout_32.addWidget(self.DefaultEncodePresetChecker, 13, 0, 1, 1)
        self.KeepChunksChecker = QtWidgets.QCheckBox(self.groupBox_7)
        self.KeepChunksChecker.setObjectName("KeepChunksChecker")
        self.gridLayout_32.addWidget(self.KeepChunksChecker, 18, 0, 1, 1)
        self.CRFSelector = MySpinBox(self.groupBox_7)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.CRFSelector.sizePolicy().hasHeightForWidth())
        self.CRFSelector.setSizePolicy(sizePolicy)
        self.CRFSelector.setMinimum(0)
        self.CRFSelector.setMaximum(51)
        self.CRFSelector.setProperty("value", 16)
        self.CRFSelector.setObjectName("CRFSelector")
        self.gridLayout_32.addWidget(self.CRFSelector, 0, 1, 1, 1)
        self.QuickExtractChecker = QtWidgets.QCheckBox(self.groupBox_7)
        self.QuickExtractChecker.setChecked(False)
        self.QuickExtractChecker.setObjectName("QuickExtractChecker")
        self.gridLayout_32.addWidget(self.QuickExtractChecker, 9, 0, 1, 1)
        self.FastDenoiseChecker = QtWidgets.QCheckBox(self.groupBox_7)
        self.FastDenoiseChecker.setObjectName("FastDenoiseChecker")
        self.gridLayout_32.addWidget(self.FastDenoiseChecker, 15, 0, 1, 1)
        self.label_25 = QtWidgets.QLabel(self.groupBox_7)
        self.label_25.setObjectName("label_25")
        self.gridLayout_32.addWidget(self.label_25, 2, 0, 1, 1)
        self.HwaccelPresetSelector = MyComboBox(self.groupBox_7)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.HwaccelPresetSelector.sizePolicy().hasHeightForWidth())
        self.HwaccelPresetSelector.setSizePolicy(sizePolicy)
        self.HwaccelPresetSelector.setObjectName("HwaccelPresetSelector")
        self.HwaccelPresetSelector.addItem("")
        self.HwaccelPresetSelector.addItem("")
        self.HwaccelPresetSelector.addItem("")
        self.HwaccelPresetSelector.addItem("")
        self.gridLayout_32.addWidget(self.HwaccelPresetSelector, 5, 1, 1, 1)
        self.KeepHeadFrameChecker = QtWidgets.QCheckBox(self.groupBox_7)
        self.KeepHeadFrameChecker.setObjectName("KeepHeadFrameChecker")
        self.gridLayout_32.addWidget(self.KeepHeadFrameChecker, 19, 0, 1, 1)
        self.DeinterlaceChecker = QtWidgets.QCheckBox(self.groupBox_7)
        self.DeinterlaceChecker.setObjectName("DeinterlaceChecker")
        self.gridLayout_32.addWidget(self.DeinterlaceChecker, 12, 0, 1, 1)
        self.EncodeAudioChecker = QtWidgets.QCheckBox(self.groupBox_7)
        self.EncodeAudioChecker.setChecked(True)
        self.EncodeAudioChecker.setObjectName("EncodeAudioChecker")
        self.gridLayout_32.addWidget(self.EncodeAudioChecker, 17, 0, 1, 1)
        self.EncoderSelector = MyComboBox(self.groupBox_7)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.EncoderSelector.sizePolicy().hasHeightForWidth())
        self.EncoderSelector.setSizePolicy(sizePolicy)
        self.EncoderSelector.setObjectName("EncoderSelector")
        self.EncoderSelector.addItem("")
        self.gridLayout_32.addWidget(self.EncoderSelector, 3, 1, 1, 1)
        self.PresetReminder = QtWidgets.QLabel(self.groupBox_7)
        self.PresetReminder.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.PresetReminder.setObjectName("PresetReminder")
        self.gridLayout_32.addWidget(self.PresetReminder, 4, 0, 1, 1)
        self.UseTargetBitrate = QtWidgets.QRadioButton(self.groupBox_7)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.UseTargetBitrate.sizePolicy().hasHeightForWidth())
        self.UseTargetBitrate.setSizePolicy(sizePolicy)
        self.UseTargetBitrate.setObjectName("UseTargetBitrate")
        self.gridLayout_32.addWidget(self.UseTargetBitrate, 1, 0, 1, 1)
        self.HwaccelPresetLabel = QtWidgets.QLabel(self.groupBox_7)
        self.HwaccelPresetLabel.setObjectName("HwaccelPresetLabel")
        self.gridLayout_32.addWidget(self.HwaccelPresetLabel, 5, 0, 1, 1)
        self.OneClickHDRField = QtWidgets.QWidget(self.groupBox_7)
        self.OneClickHDRField.setObjectName("OneClickHDRField")
        self.horizontalLayout_18 = QtWidgets.QHBoxLayout(self.OneClickHDRField)
        self.horizontalLayout_18.setObjectName("horizontalLayout_18")
        self.OneClickHDRLabel = QtWidgets.QLabel(self.OneClickHDRField)
        self.OneClickHDRLabel.setObjectName("OneClickHDRLabel")
        self.horizontalLayout_18.addWidget(self.OneClickHDRLabel)
        self.OneClickHDRModeSelector = MyComboBox(self.OneClickHDRField)
        self.OneClickHDRModeSelector.setObjectName("OneClickHDRModeSelector")
        self.OneClickHDRModeSelector.addItem("")
        self.OneClickHDRModeSelector.addItem("")
        self.horizontalLayout_18.addWidget(self.OneClickHDRModeSelector)
        self.gridLayout_32.addWidget(self.OneClickHDRField, 22, 0, 1, 2)
        self.Bit16WorkflowChecker = QtWidgets.QCheckBox(self.groupBox_7)
        self.Bit16WorkflowChecker.setChecked(True)
        self.Bit16WorkflowChecker.setObjectName("Bit16WorkflowChecker")
        self.gridLayout_32.addWidget(self.Bit16WorkflowChecker, 6, 0, 1, 1)
        self.UseCRF = QtWidgets.QRadioButton(self.groupBox_7)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.UseCRF.sizePolicy().hasHeightForWidth())
        self.UseCRF.setSizePolicy(sizePolicy)
        self.UseCRF.setChecked(True)
        self.UseCRF.setObjectName("UseCRF")
        self.gridLayout_32.addWidget(self.UseCRF, 0, 0, 1, 1)
        self.HDRModeField = QtWidgets.QWidget(self.groupBox_7)
        self.HDRModeField.setObjectName("HDRModeField")
        self.horizontalLayout_17 = QtWidgets.QHBoxLayout(self.HDRModeField)
        self.horizontalLayout_17.setObjectName("horizontalLayout_17")
        self.HDRModeLabel = QtWidgets.QLabel(self.HDRModeField)
        self.HDRModeLabel.setObjectName("HDRModeLabel")
        self.horizontalLayout_17.addWidget(self.HDRModeLabel)
        self.HDRModeSelector = MyComboBox(self.HDRModeField)
        self.HDRModeSelector.setObjectName("HDRModeSelector")
        self.HDRModeSelector.addItem("")
        self.HDRModeSelector.addItem("")
        self.HDRModeSelector.addItem("")
        self.HDRModeSelector.addItem("")
        self.HDRModeSelector.addItem("")
        self.HDRModeSelector.addItem("")
        self.horizontalLayout_17.addWidget(self.HDRModeSelector)
        self.gridLayout_32.addWidget(self.HDRModeField, 21, 0, 1, 2)
        self.EncoderReminder = QtWidgets.QLabel(self.groupBox_7)
        self.EncoderReminder.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.EncoderReminder.setObjectName("EncoderReminder")
        self.gridLayout_32.addWidget(self.EncoderReminder, 3, 0, 1, 1)
        self.EncodeThreadField = QtWidgets.QWidget(self.groupBox_7)
        self.EncodeThreadField.setObjectName("EncodeThreadField")
        self.gridLayout_36 = QtWidgets.QGridLayout(self.EncodeThreadField)
        self.gridLayout_36.setObjectName("gridLayout_36")
        self.UseEncodeThread = QtWidgets.QCheckBox(self.EncodeThreadField)
        self.UseEncodeThread.setObjectName("UseEncodeThread")
        self.gridLayout_36.addWidget(self.UseEncodeThread, 0, 0, 1, 1)
        self.EncodeThreadSelector = MySpinBox(self.EncodeThreadField)
        self.EncodeThreadSelector.setObjectName("EncodeThreadSelector")
        self.gridLayout_36.addWidget(self.EncodeThreadSelector, 0, 1, 1, 1)
        self.gridLayout_32.addWidget(self.EncodeThreadField, 20, 0, 1, 2)
        self.HwaccelDecode = QtWidgets.QCheckBox(self.groupBox_7)
        self.HwaccelDecode.setChecked(False)
        self.HwaccelDecode.setObjectName("HwaccelDecode")
        self.gridLayout_32.addWidget(self.HwaccelDecode, 11, 0, 1, 1)
        self.UseAVX512Checker = QtWidgets.QCheckBox(self.groupBox_7)
        self.UseAVX512Checker.setChecked(False)
        self.UseAVX512Checker.setObjectName("UseAVX512Checker")
        self.gridLayout_32.addWidget(self.UseAVX512Checker, 14, 0, 1, 1)
        self.gridLayout_29.addWidget(self.groupBox_7, 1, 0, 1, 1)
        self.RenderSettingsLabel = QtWidgets.QLabel(self.RenderSettings)
        self.RenderSettingsLabel.setObjectName("RenderSettingsLabel")
        self.gridLayout_29.addWidget(self.RenderSettingsLabel, 3, 0, 1, 1)
        self.EncodeSettingsLabel = QtWidgets.QLabel(self.RenderSettings)
        self.EncodeSettingsLabel.setObjectName("EncodeSettingsLabel")
        self.gridLayout_29.addWidget(self.EncodeSettingsLabel, 0, 0, 1, 1)
        self.RenderSettingsGroup = QtWidgets.QGroupBox(self.RenderSettings)
        self.RenderSettingsGroup.setTitle("")
        self.RenderSettingsGroup.setObjectName("RenderSettingsGroup")
        self.gridLayout_27 = QtWidgets.QGridLayout(self.RenderSettingsGroup)
        self.gridLayout_27.setObjectName("gridLayout_27")
        self.gridLayout_12 = QtWidgets.QGridLayout()
        self.gridLayout_12.setObjectName("gridLayout_12")
        self.CustomRenderParamsLabel = QtWidgets.QLabel(self.RenderSettingsGroup)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.CustomRenderParamsLabel.sizePolicy().hasHeightForWidth())
        self.CustomRenderParamsLabel.setSizePolicy(sizePolicy)
        self.CustomRenderParamsLabel.setObjectName("CustomRenderParamsLabel")
        self.gridLayout_12.addWidget(self.CustomRenderParamsLabel, 14, 0, 1, 1)
        self.horizontalLayout_26 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_26.setObjectName("horizontalLayout_26")
        self.RenderGapSelector = MySpinBox(self.RenderSettingsGroup)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.RenderGapSelector.sizePolicy().hasHeightForWidth())
        self.RenderGapSelector.setSizePolicy(sizePolicy)
        self.RenderGapSelector.setMinimum(100)
        self.RenderGapSelector.setMaximum(999999999)
        self.RenderGapSelector.setSingleStep(100)
        self.RenderGapSelector.setProperty("value", 1000)
        self.RenderGapSelector.setObjectName("RenderGapSelector")
        self.horizontalLayout_26.addWidget(self.RenderGapSelector)
        self.label_27 = QtWidgets.QLabel(self.RenderSettingsGroup)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_27.sizePolicy().hasHeightForWidth())
        self.label_27.setSizePolicy(sizePolicy)
        self.label_27.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_27.setObjectName("label_27")
        self.horizontalLayout_26.addWidget(self.label_27)
        self.gridLayout_12.addLayout(self.horizontalLayout_26, 3, 0, 1, 1)
        self.slowmotion = QtWidgets.QCheckBox(self.RenderSettingsGroup)
        self.slowmotion.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.slowmotion.setObjectName("slowmotion")
        self.gridLayout_12.addWidget(self.slowmotion, 10, 0, 1, 1)
        self.label_26 = QtWidgets.QLabel(self.RenderSettingsGroup)
        self.label_26.setObjectName("label_26")
        self.gridLayout_12.addWidget(self.label_26, 2, 0, 1, 1)
        self.SlowmotionFPS = MyLineWidget(self.RenderSettingsGroup)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.SlowmotionFPS.sizePolicy().hasHeightForWidth())
        self.SlowmotionFPS.setSizePolicy(sizePolicy)
        self.SlowmotionFPS.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.SlowmotionFPS.setObjectName("SlowmotionFPS")
        self.gridLayout_12.addWidget(self.SlowmotionFPS, 11, 0, 1, 1)
        self.FFmpegCustomer = MyLineWidget(self.RenderSettingsGroup)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.FFmpegCustomer.sizePolicy().hasHeightForWidth())
        self.FFmpegCustomer.setSizePolicy(sizePolicy)
        self.FFmpegCustomer.setObjectName("FFmpegCustomer")
        self.gridLayout_12.addWidget(self.FFmpegCustomer, 15, 0, 1, 1)
        self.line = QtWidgets.QFrame(self.RenderSettingsGroup)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.gridLayout_12.addWidget(self.line, 13, 0, 1, 1)
        self.gridLayout_27.addLayout(self.gridLayout_12, 0, 0, 1, 1)
        self.gridLayout_29.addWidget(self.RenderSettingsGroup, 7, 0, 1, 1)
        spacerItem4 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_29.addItem(spacerItem4, 8, 0, 1, 1)
        self.MBufferChecker = QtWidgets.QCheckBox(self.RenderSettings)
        self.MBufferChecker.setObjectName("MBufferChecker")
        self.gridLayout_29.addWidget(self.MBufferChecker, 4, 0, 1, 1)
        self.toolBox.addItem(self.RenderSettings, "")
        self.RIFESettings = QtWidgets.QWidget()
        self.RIFESettings.setGeometry(QtCore.QRect(0, 0, 368, 514))
        self.RIFESettings.setObjectName("RIFESettings")
        self.gridLayout_30 = QtWidgets.QGridLayout(self.RIFESettings)
        self.gridLayout_30.setObjectName("gridLayout_30")
        self.NcnnRifeSettingsBox = QtWidgets.QGroupBox(self.RIFESettings)
        self.NcnnRifeSettingsBox.setTitle("")
        self.NcnnRifeSettingsBox.setObjectName("NcnnRifeSettingsBox")
        self.gridLayout_11 = QtWidgets.QGridLayout(self.NcnnRifeSettingsBox)
        self.gridLayout_11.setObjectName("gridLayout_11")
        self.label_34 = QtWidgets.QLabel(self.NcnnRifeSettingsBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_34.sizePolicy().hasHeightForWidth())
        self.label_34.setSizePolicy(sizePolicy)
        self.label_34.setObjectName("label_34")
        self.gridLayout_11.addWidget(self.label_34, 0, 0, 1, 1)
        self.ncnnInterpThreadCnt = MySpinBox(self.NcnnRifeSettingsBox)
        self.ncnnInterpThreadCnt.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ncnnInterpThreadCnt.sizePolicy().hasHeightForWidth())
        self.ncnnInterpThreadCnt.setSizePolicy(sizePolicy)
        self.ncnnInterpThreadCnt.setProperty("value", 4)
        self.ncnnInterpThreadCnt.setObjectName("ncnnInterpThreadCnt")
        self.gridLayout_11.addWidget(self.ncnnInterpThreadCnt, 0, 1, 1, 1)
        self.SelectedGpuLabel = QtWidgets.QLabel(self.NcnnRifeSettingsBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.SelectedGpuLabel.sizePolicy().hasHeightForWidth())
        self.SelectedGpuLabel.setSizePolicy(sizePolicy)
        self.SelectedGpuLabel.setObjectName("SelectedGpuLabel")
        self.gridLayout_11.addWidget(self.SelectedGpuLabel, 1, 0, 1, 1)
        self.ncnnSelectGPU = MySpinBox(self.NcnnRifeSettingsBox)
        self.ncnnSelectGPU.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ncnnSelectGPU.sizePolicy().hasHeightForWidth())
        self.ncnnSelectGPU.setSizePolicy(sizePolicy)
        self.ncnnSelectGPU.setProperty("value", 0)
        self.ncnnSelectGPU.setObjectName("ncnnSelectGPU")
        self.gridLayout_11.addWidget(self.ncnnSelectGPU, 1, 1, 1, 1)
        self.gridLayout_30.addWidget(self.NcnnRifeSettingsBox, 6, 0, 1, 1)
        self.NvidiaRifeSettingsBox = QtWidgets.QGroupBox(self.RIFESettings)
        self.NvidiaRifeSettingsBox.setTitle("")
        self.NvidiaRifeSettingsBox.setObjectName("NvidiaRifeSettingsBox")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.NvidiaRifeSettingsBox)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.DiscreteCardSelector = MyComboBox(self.NvidiaRifeSettingsBox)
        self.DiscreteCardSelector.setSizeAdjustPolicy(QtWidgets.QComboBox.AdjustToContentsOnFirstShow)
        self.DiscreteCardSelector.setMinimumContentsLength(20)
        self.DiscreteCardSelector.setObjectName("DiscreteCardSelector")
        self.gridLayout_5.addWidget(self.DiscreteCardSelector, 3, 0, 1, 2)
        self.UseMultiCardsChecker = QtWidgets.QCheckBox(self.NvidiaRifeSettingsBox)
        self.UseMultiCardsChecker.setObjectName("UseMultiCardsChecker")
        self.gridLayout_5.addWidget(self.UseMultiCardsChecker, 4, 0, 1, 1)
        self.AutoInterpScaleChecker = QtWidgets.QCheckBox(self.NvidiaRifeSettingsBox)
        self.AutoInterpScaleChecker.setObjectName("AutoInterpScaleChecker")
        self.gridLayout_5.addWidget(self.AutoInterpScaleChecker, 6, 0, 1, 1)
        self.label_32 = QtWidgets.QLabel(self.NvidiaRifeSettingsBox)
        self.label_32.setObjectName("label_32")
        self.gridLayout_5.addWidget(self.label_32, 2, 0, 1, 1)
        self.ForwardEnsembleChecker = QtWidgets.QCheckBox(self.NvidiaRifeSettingsBox)
        self.ForwardEnsembleChecker.setChecked(True)
        self.ForwardEnsembleChecker.setObjectName("ForwardEnsembleChecker")
        self.gridLayout_5.addWidget(self.ForwardEnsembleChecker, 5, 0, 1, 1)
        self.AutoInterpScaleReminder = QtWidgets.QLabel(self.NvidiaRifeSettingsBox)
        self.AutoInterpScaleReminder.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.AutoInterpScaleReminder.setObjectName("AutoInterpScaleReminder")
        self.gridLayout_5.addWidget(self.AutoInterpScaleReminder, 7, 0, 1, 1)
        self.InterpBeforeResizeSelector = MySpinBox(self.NvidiaRifeSettingsBox)
        self.InterpBeforeResizeSelector.setMinimum(100)
        self.InterpBeforeResizeSelector.setMaximum(10000)
        self.InterpBeforeResizeSelector.setSingleStep(50)
        self.InterpBeforeResizeSelector.setProperty("value", 1000)
        self.InterpBeforeResizeSelector.setObjectName("InterpBeforeResizeSelector")
        self.gridLayout_5.addWidget(self.InterpBeforeResizeSelector, 7, 1, 1, 1)
        self.gridLayout_30.addWidget(self.NvidiaRifeSettingsBox, 4, 0, 1, 1)
        self.NcnnRifeSettingsLabel = QtWidgets.QLabel(self.RIFESettings)
        self.NcnnRifeSettingsLabel.setObjectName("NcnnRifeSettingsLabel")
        self.gridLayout_30.addWidget(self.NcnnRifeSettingsLabel, 5, 0, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.RIFESettings)
        self.label_2.setObjectName("label_2")
        self.gridLayout_30.addWidget(self.label_2, 7, 0, 1, 1)
        self.GlobalRifeSettingsBox = QtWidgets.QGroupBox(self.RIFESettings)
        self.GlobalRifeSettingsBox.setTitle("")
        self.GlobalRifeSettingsBox.setObjectName("GlobalRifeSettingsBox")
        self.gridLayout_40 = QtWidgets.QGridLayout(self.GlobalRifeSettingsBox)
        self.gridLayout_40.setObjectName("gridLayout_40")
        self.InterlaceInferenceReminder = QtWidgets.QLabel(self.GlobalRifeSettingsBox)
        self.InterlaceInferenceReminder.setObjectName("InterlaceInferenceReminder")
        self.gridLayout_40.addWidget(self.InterlaceInferenceReminder, 11, 0, 1, 1)
        self.ReverseChecker = QtWidgets.QCheckBox(self.GlobalRifeSettingsBox)
        self.ReverseChecker.setObjectName("ReverseChecker")
        self.gridLayout_40.addWidget(self.ReverseChecker, 3, 0, 1, 1)
        self.TtaModeLabel = QtWidgets.QLabel(self.GlobalRifeSettingsBox)
        self.TtaModeLabel.setObjectName("TtaModeLabel")
        self.gridLayout_40.addWidget(self.TtaModeLabel, 9, 0, 1, 1)
        self.InterpScaleReminder = QtWidgets.QLabel(self.GlobalRifeSettingsBox)
        self.InterpScaleReminder.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.InterpScaleReminder.setObjectName("InterpScaleReminder")
        self.gridLayout_40.addWidget(self.InterpScaleReminder, 4, 0, 1, 1)
        self.FP16Checker = QtWidgets.QCheckBox(self.GlobalRifeSettingsBox)
        self.FP16Checker.setAcceptDrops(True)
        self.FP16Checker.setObjectName("FP16Checker")
        self.gridLayout_40.addWidget(self.FP16Checker, 0, 0, 1, 1)
        self.InterpScaleSelector = MyComboBox(self.GlobalRifeSettingsBox)
        self.InterpScaleSelector.setObjectName("InterpScaleSelector")
        self.InterpScaleSelector.addItem("")
        self.InterpScaleSelector.addItem("")
        self.InterpScaleSelector.addItem("")
        self.InterpScaleSelector.addItem("")
        self.InterpScaleSelector.addItem("")
        self.InterpScaleSelector.addItem("")
        self.gridLayout_40.addWidget(self.InterpScaleSelector, 4, 1, 1, 1)
        self.label_31 = QtWidgets.QLabel(self.GlobalRifeSettingsBox)
        self.label_31.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_31.setObjectName("label_31")
        self.gridLayout_40.addWidget(self.label_31, 13, 0, 1, 1)
        self.ModuleSelector = MyComboBox(self.GlobalRifeSettingsBox)
        self.ModuleSelector.setToolTip("")
        self.ModuleSelector.setSizeAdjustPolicy(QtWidgets.QComboBox.AdjustToMinimumContentsLength)
        self.ModuleSelector.setMinimumContentsLength(20)
        self.ModuleSelector.setObjectName("ModuleSelector")
        self.gridLayout_40.addWidget(self.ModuleSelector, 13, 1, 1, 1)
        self.TtaModeZone = QtWidgets.QHBoxLayout()
        self.TtaModeZone.setObjectName("TtaModeZone")
        self.TtaModeSelector = MyComboBox(self.GlobalRifeSettingsBox)
        self.TtaModeSelector.setObjectName("TtaModeSelector")
        self.TtaModeSelector.addItem("")
        self.TtaModeSelector.addItem("")
        self.TtaModeSelector.addItem("")
        self.TtaModeSelector.addItem("")
        self.TtaModeZone.addWidget(self.TtaModeSelector)
        self.TtaIterTimesSelector = MySpinBox(self.GlobalRifeSettingsBox)
        self.TtaIterTimesSelector.setMinimum(1)
        self.TtaIterTimesSelector.setProperty("value", 1)
        self.TtaIterTimesSelector.setObjectName("TtaIterTimesSelector")
        self.TtaModeZone.addWidget(self.TtaIterTimesSelector)
        self.gridLayout_40.addLayout(self.TtaModeZone, 10, 0, 1, 2)
        self.EvictFlickerChecker = QtWidgets.QCheckBox(self.GlobalRifeSettingsBox)
        self.EvictFlickerChecker.setAcceptDrops(True)
        self.EvictFlickerChecker.setObjectName("EvictFlickerChecker")
        self.gridLayout_40.addWidget(self.EvictFlickerChecker, 2, 0, 1, 1)
        self.InterlaceInferenceChecker = MyComboBox(self.GlobalRifeSettingsBox)
        self.InterlaceInferenceChecker.setToolTip("")
        self.InterlaceInferenceChecker.setSizeAdjustPolicy(QtWidgets.QComboBox.AdjustToMinimumContentsLength)
        self.InterlaceInferenceChecker.setMinimumContentsLength(20)
        self.InterlaceInferenceChecker.setObjectName("InterlaceInferenceChecker")
        self.InterlaceInferenceChecker.addItem("")
        self.InterlaceInferenceChecker.addItem("")
        self.InterlaceInferenceChecker.addItem("")
        self.InterlaceInferenceChecker.addItem("")
        self.InterlaceInferenceChecker.addItem("")
        self.InterlaceInferenceChecker.addItem("")
        self.InterlaceInferenceChecker.addItem("")
        self.gridLayout_40.addWidget(self.InterlaceInferenceChecker, 11, 1, 1, 1)
        self.gridLayout_30.addWidget(self.GlobalRifeSettingsBox, 1, 0, 1, 1)
        self.NvidiaRifeSettingsLabel = QtWidgets.QLabel(self.RIFESettings)
        self.NvidiaRifeSettingsLabel.setObjectName("NvidiaRifeSettingsLabel")
        self.gridLayout_30.addWidget(self.NvidiaRifeSettingsLabel, 3, 0, 1, 1)
        self.GlobalRifeSettingsLabel = QtWidgets.QLabel(self.RIFESettings)
        self.GlobalRifeSettingsLabel.setObjectName("GlobalRifeSettingsLabel")
        self.gridLayout_30.addWidget(self.GlobalRifeSettingsLabel, 0, 0, 1, 1)
        self.toolBox.addItem(self.RIFESettings, "")
        self.page = QtWidgets.QWidget()
        self.page.setGeometry(QtCore.QRect(0, 0, 382, 399))
        self.page.setObjectName("page")
        self.gridLayout_37 = QtWidgets.QGridLayout(self.page)
        self.gridLayout_37.setObjectName("gridLayout_37")
        self.SettingsPresetBox = QtWidgets.QGroupBox(self.page)
        self.SettingsPresetBox.setTitle("")
        self.SettingsPresetBox.setObjectName("SettingsPresetBox")
        self.gridLayout_39 = QtWidgets.QGridLayout(self.SettingsPresetBox)
        self.gridLayout_39.setObjectName("gridLayout_39")
        spacerItem5 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_39.addItem(spacerItem5, 2, 0, 1, 1)
        self.gridLayout_38 = QtWidgets.QGridLayout()
        self.gridLayout_38.setObjectName("gridLayout_38")
        self.SettingsTemplateSelector = MyComboBox(self.SettingsPresetBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.SettingsTemplateSelector.sizePolicy().hasHeightForWidth())
        self.SettingsTemplateSelector.setSizePolicy(sizePolicy)
        self.SettingsTemplateSelector.setObjectName("SettingsTemplateSelector")
        self.gridLayout_38.addWidget(self.SettingsTemplateSelector, 2, 0, 1, 1)
        self.horizontalLayout_15 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_15.setObjectName("horizontalLayout_15")
        self.AddTemplateButton = QtWidgets.QPushButton(self.SettingsPresetBox)
        self.AddTemplateButton.setObjectName("AddTemplateButton")
        self.horizontalLayout_15.addWidget(self.AddTemplateButton)
        self.RemoveTemplateButton = QtWidgets.QPushButton(self.SettingsPresetBox)
        self.RemoveTemplateButton.setObjectName("RemoveTemplateButton")
        self.horizontalLayout_15.addWidget(self.RemoveTemplateButton)
        self.gridLayout_38.addLayout(self.horizontalLayout_15, 0, 0, 1, 1)
        self.EditTemplateName = MyLineWidget(self.SettingsPresetBox)
        self.EditTemplateName.setAlignment(QtCore.Qt.AlignCenter)
        self.EditTemplateName.setObjectName("EditTemplateName")
        self.gridLayout_38.addWidget(self.EditTemplateName, 1, 0, 1, 1)
        self.UseTemplateButton = QtWidgets.QPushButton(self.SettingsPresetBox)
        self.UseTemplateButton.setObjectName("UseTemplateButton")
        self.gridLayout_38.addWidget(self.UseTemplateButton, 3, 0, 1, 1)
        self.gridLayout_39.addLayout(self.gridLayout_38, 0, 0, 1, 1)
        self.gridLayout_37.addWidget(self.SettingsPresetBox, 0, 0, 1, 1)
        self.toolBox.addItem(self.page, "")
        self.ToolBox = QtWidgets.QWidget()
        self.ToolBox.setGeometry(QtCore.QRect(0, 0, 382, 399))
        self.ToolBox.setObjectName("ToolBox")
        self.gridLayout_7 = QtWidgets.QGridLayout(self.ToolBox)
        self.gridLayout_7.setObjectName("gridLayout_7")
        self.GIFLabel = QtWidgets.QLabel(self.ToolBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.GIFLabel.sizePolicy().hasHeightForWidth())
        self.GIFLabel.setSizePolicy(sizePolicy)
        self.GIFLabel.setObjectName("GIFLabel")
        self.gridLayout_7.addWidget(self.GIFLabel, 1, 0, 1, 1)
        spacerItem6 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_7.addItem(spacerItem6, 4, 0, 1, 1)
        self.gridLayout_16 = QtWidgets.QGridLayout()
        self.gridLayout_16.setObjectName("gridLayout_16")
        self.GifBox = QtWidgets.QGroupBox(self.ToolBox)
        self.GifBox.setEnabled(True)
        self.GifBox.setTitle("")
        self.GifBox.setObjectName("GifBox")
        self.gridLayout_25 = QtWidgets.QGridLayout(self.GifBox)
        self.gridLayout_25.setObjectName("gridLayout_25")
        self.GifInput = MyLineWidget(self.GifBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.GifInput.sizePolicy().hasHeightForWidth())
        self.GifInput.setSizePolicy(sizePolicy)
        self.GifInput.setDragEnabled(True)
        self.GifInput.setObjectName("GifInput")
        self.gridLayout_25.addWidget(self.GifInput, 0, 0, 1, 1)
        self.GifButton = QtWidgets.QPushButton(self.GifBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.GifButton.sizePolicy().hasHeightForWidth())
        self.GifButton.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Abril Fatface")
        font.setPointSize(12)
        self.GifButton.setFont(font)
        self.GifButton.setObjectName("GifButton")
        self.gridLayout_25.addWidget(self.GifButton, 4, 0, 1, 1)
        self.GifOutput = MyLineWidget(self.GifBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.GifOutput.sizePolicy().hasHeightForWidth())
        self.GifOutput.setSizePolicy(sizePolicy)
        self.GifOutput.setDragEnabled(True)
        self.GifOutput.setObjectName("GifOutput")
        self.gridLayout_25.addWidget(self.GifOutput, 2, 0, 1, 1)
        self.GifLoopChecker = QtWidgets.QCheckBox(self.GifBox)
        self.GifLoopChecker.setObjectName("GifLoopChecker")
        self.gridLayout_25.addWidget(self.GifLoopChecker, 3, 0, 1, 1)
        self.gridLayout_16.addWidget(self.GifBox, 0, 0, 1, 1)
        self.VAConcat = QtWidgets.QGroupBox(self.ToolBox)
        self.VAConcat.setTitle("")
        self.VAConcat.setObjectName("VAConcat")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.VAConcat)
        self.verticalLayout.setObjectName("verticalLayout")
        self.ConcatAllButton = QtWidgets.QPushButton(self.VAConcat)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ConcatAllButton.sizePolicy().hasHeightForWidth())
        self.ConcatAllButton.setSizePolicy(sizePolicy)
        self.ConcatAllButton.setObjectName("ConcatAllButton")
        self.verticalLayout.addWidget(self.ConcatAllButton)
        self.ConcatInputV = MyLineWidget(self.VAConcat)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ConcatInputV.sizePolicy().hasHeightForWidth())
        self.ConcatInputV.setSizePolicy(sizePolicy)
        self.ConcatInputV.setDragEnabled(True)
        self.ConcatInputV.setObjectName("ConcatInputV")
        self.verticalLayout.addWidget(self.ConcatInputV)
        self.ConcatInputA = MyLineWidget(self.VAConcat)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ConcatInputA.sizePolicy().hasHeightForWidth())
        self.ConcatInputA.setSizePolicy(sizePolicy)
        self.ConcatInputA.setDragEnabled(True)
        self.ConcatInputA.setObjectName("ConcatInputA")
        self.verticalLayout.addWidget(self.ConcatInputA)
        self.OutputConcat = MyLineWidget(self.VAConcat)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.OutputConcat.sizePolicy().hasHeightForWidth())
        self.OutputConcat.setSizePolicy(sizePolicy)
        self.OutputConcat.setDragEnabled(True)
        self.OutputConcat.setObjectName("OutputConcat")
        self.verticalLayout.addWidget(self.OutputConcat)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.ConcatButton = QtWidgets.QPushButton(self.VAConcat)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ConcatButton.sizePolicy().hasHeightForWidth())
        self.ConcatButton.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Abril Fatface")
        font.setPointSize(12)
        self.ConcatButton.setFont(font)
        self.ConcatButton.setObjectName("ConcatButton")
        self.horizontalLayout_2.addWidget(self.ConcatButton)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.ToolBoxEncodeAudioChecker = QtWidgets.QCheckBox(self.VAConcat)
        self.ToolBoxEncodeAudioChecker.setObjectName("ToolBoxEncodeAudioChecker")
        self.verticalLayout.addWidget(self.ToolBoxEncodeAudioChecker)
        self.gridLayout_16.addWidget(self.VAConcat, 2, 0, 1, 1)
        self.ConcatLabel = QtWidgets.QLabel(self.ToolBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ConcatLabel.sizePolicy().hasHeightForWidth())
        self.ConcatLabel.setSizePolicy(sizePolicy)
        self.ConcatLabel.setObjectName("ConcatLabel")
        self.gridLayout_16.addWidget(self.ConcatLabel, 1, 0, 1, 1)
        self.gridLayout_7.addLayout(self.gridLayout_16, 2, 0, 1, 1)
        self.toolBox.addItem(self.ToolBox, "")
        self.gridLayout_10.addWidget(self.toolBox, 1, 0, 1, 1)
        self.AdvanceSettingsArea.setWidget(self.AdvanceSettingsAreaWidget)
        self.gridLayout_17.addWidget(self.AdvanceSettingsArea, 0, 0, 1, 1)
        self.gridLayout_19.addWidget(self.splitter, 0, 0, 1, 1)
        self.tabWidget.addTab(self.step1, "")
        self.step3 = QtWidgets.QWidget()
        self.step3.setAcceptDrops(True)
        self.step3.setWhatsThis("")
        self.step3.setObjectName("step3")
        self.gridLayout_24 = QtWidgets.QGridLayout(self.step3)
        self.gridLayout_24.setObjectName("gridLayout_24")
        self.gridLayout_8 = QtWidgets.QGridLayout()
        self.gridLayout_8.setObjectName("gridLayout_8")
        self.horizontalLayout_19 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_19.setObjectName("horizontalLayout_19")
        spacerItem7 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_19.addItem(spacerItem7)
        self.KillProcButton = QtWidgets.QPushButton(self.step3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.KillProcButton.sizePolicy().hasHeightForWidth())
        self.KillProcButton.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Abril Fatface")
        font.setPointSize(20)
        self.KillProcButton.setFont(font)
        self.KillProcButton.setObjectName("KillProcButton")
        self.horizontalLayout_19.addWidget(self.KillProcButton)
        self.PauseProcess = QtWidgets.QPushButton(self.step3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.PauseProcess.sizePolicy().hasHeightForWidth())
        self.PauseProcess.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Abril Fatface")
        font.setPointSize(20)
        self.PauseProcess.setFont(font)
        self.PauseProcess.setObjectName("PauseProcess")
        self.horizontalLayout_19.addWidget(self.PauseProcess)
        self.gridLayout_8.addLayout(self.horizontalLayout_19, 3, 0, 1, 1)
        self.OptionCheck = MyTextWidget(self.step3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.OptionCheck.sizePolicy().hasHeightForWidth())
        self.OptionCheck.setSizePolicy(sizePolicy)
        self.OptionCheck.setAutoFormatting(QtWidgets.QTextEdit.AutoAll)
        self.OptionCheck.setUndoRedoEnabled(False)
        self.OptionCheck.setLineWrapMode(QtWidgets.QTextEdit.NoWrap)
        self.OptionCheck.setReadOnly(True)
        self.OptionCheck.setTextInteractionFlags(QtCore.Qt.LinksAccessibleByMouse|QtCore.Qt.TextSelectableByKeyboard|QtCore.Qt.TextSelectableByMouse)
        self.OptionCheck.setObjectName("OptionCheck")
        self.gridLayout_8.addWidget(self.OptionCheck, 5, 0, 2, 2)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.OutputGuideLabel = QtWidgets.QLabel(self.step3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.OutputGuideLabel.sizePolicy().hasHeightForWidth())
        self.OutputGuideLabel.setSizePolicy(sizePolicy)
        self.OutputGuideLabel.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.OutputGuideLabel.setWordWrap(True)
        self.OutputGuideLabel.setOpenExternalLinks(True)
        self.OutputGuideLabel.setTextInteractionFlags(QtCore.Qt.LinksAccessibleByMouse|QtCore.Qt.TextSelectableByMouse)
        self.OutputGuideLabel.setObjectName("OutputGuideLabel")
        self.horizontalLayout_3.addWidget(self.OutputGuideLabel)
        self.gridLayout_8.addLayout(self.horizontalLayout_3, 1, 0, 1, 1)
        self.ProgressBarVisibleControl = QtWidgets.QWidget(self.step3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ProgressBarVisibleControl.sizePolicy().hasHeightForWidth())
        self.ProgressBarVisibleControl.setSizePolicy(sizePolicy)
        self.ProgressBarVisibleControl.setObjectName("ProgressBarVisibleControl")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.ProgressBarVisibleControl)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.label_17 = QtWidgets.QLabel(self.ProgressBarVisibleControl)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_17.sizePolicy().hasHeightForWidth())
        self.label_17.setSizePolicy(sizePolicy)
        self.label_17.setObjectName("label_17")
        self.horizontalLayout_5.addWidget(self.label_17)
        self.progressBar = QtWidgets.QProgressBar(self.ProgressBarVisibleControl)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.progressBar.sizePolicy().hasHeightForWidth())
        self.progressBar.setSizePolicy(sizePolicy)
        self.progressBar.setMaximum(100)
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.horizontalLayout_5.addWidget(self.progressBar)
        self.gridLayout_8.addWidget(self.ProgressBarVisibleControl, 7, 0, 1, 1)
        self.MissionStatusLabel = QtWidgets.QLabel(self.step3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.MissionStatusLabel.sizePolicy().hasHeightForWidth())
        self.MissionStatusLabel.setSizePolicy(sizePolicy)
        self.MissionStatusLabel.setText("")
        self.MissionStatusLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.MissionStatusLabel.setObjectName("MissionStatusLabel")
        self.gridLayout_8.addWidget(self.MissionStatusLabel, 4, 0, 1, 1)
        self.gridLayout_24.addLayout(self.gridLayout_8, 0, 0, 1, 1)
        self.tabWidget.addTab(self.step3, "")
        self.gridLayout_18.addWidget(self.tabWidget, 3, 0, 1, 1)
        self.gridLayout_6.addWidget(self.MainFrame, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1252, 22))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        self.menu_2 = QtWidgets.QMenu(self.menubar)
        self.menu_2.setObjectName("menu_2")
        self.menuAboutSVFI = QtWidgets.QMenu(self.menubar)
        self.menuAboutSVFI.setObjectName("menuAboutSVFI")
        self.menu_3 = QtWidgets.QMenu(self.menubar)
        self.menu_3.setObjectName("menu_3")
        MainWindow.setMenuBar(self.menubar)
        self.actionImportVideos = QtWidgets.QAction(MainWindow)
        self.actionImportVideos.setObjectName("actionImportVideos")
        self.actionClearVideo = QtWidgets.QAction(MainWindow)
        self.actionClearVideo.setObjectName("actionClearVideo")
        self.actionClearAllVideos = QtWidgets.QAction(MainWindow)
        self.actionClearAllVideos.setObjectName("actionClearAllVideos")
        self.actionPreferences = QtWidgets.QAction(MainWindow)
        self.actionPreferences.setObjectName("actionPreferences")
        self.actionQuit = QtWidgets.QAction(MainWindow)
        self.actionQuit.setObjectName("actionQuit")
        self.actionStartProcess = QtWidgets.QAction(MainWindow)
        self.actionStartProcess.setObjectName("actionStartProcess")
        self.actionSelect_Start_Frames = QtWidgets.QAction(MainWindow)
        self.actionSelect_Start_Frames.setObjectName("actionSelect_Start_Frames")
        self.actionSelect_End_Frames = QtWidgets.QAction(MainWindow)
        self.actionSelect_End_Frames.setObjectName("actionSelect_End_Frames")
        self.actionSaveSettings = QtWidgets.QAction(MainWindow)
        self.actionSaveSettings.setObjectName("actionSaveSettings")
        self.actionLoadDefaultSettings = QtWidgets.QAction(MainWindow)
        self.actionLoadDefaultSettings.setObjectName("actionLoadDefaultSettings")
        self.actionErrorLog = QtWidgets.QAction(MainWindow)
        self.actionErrorLog.setObjectName("actionErrorLog")
        self.actionGetSupport = QtWidgets.QAction(MainWindow)
        self.actionGetSupport.setObjectName("actionGetSupport")
        self.actionManualGuide = QtWidgets.QAction(MainWindow)
        self.actionManualGuide.setObjectName("actionManualGuide")
        self.actionAbout = QtWidgets.QAction(MainWindow)
        self.actionAbout.setObjectName("actionAbout")
        self.actionStopProcess = QtWidgets.QAction(MainWindow)
        self.actionStopProcess.setObjectName("actionStopProcess")
        self.actionLangZH = QtWidgets.QAction(MainWindow)
        self.actionLangZH.setObjectName("actionLangZH")
        self.actionLangEN = QtWidgets.QAction(MainWindow)
        self.actionLangEN.setObjectName("actionLangEN")
        self.actionBack2Home = QtWidgets.QAction(MainWindow)
        self.actionBack2Home.setObjectName("actionBack2Home")
        self.actionBack2Output = QtWidgets.QAction(MainWindow)
        self.actionBack2Output.setObjectName("actionBack2Output")
        self.actionStartRenderProcess = QtWidgets.QAction(MainWindow)
        self.actionStartRenderProcess.setShortcutContext(QtCore.Qt.ApplicationShortcut)
        self.actionStartRenderProcess.setObjectName("actionStartRenderProcess")
        self.actionStartExtractProcess = QtWidgets.QAction(MainWindow)
        self.actionStartExtractProcess.setObjectName("actionStartExtractProcess")
        self.menu.addAction(self.actionImportVideos)
        self.menu.addAction(self.actionClearVideo)
        self.menu.addAction(self.actionClearAllVideos)
        self.menu.addSeparator()
        self.menu.addAction(self.actionBack2Home)
        self.menu.addAction(self.actionBack2Output)
        self.menu.addSeparator()
        self.menu.addAction(self.actionPreferences)
        self.menu.addSeparator()
        self.menu.addAction(self.actionQuit)
        self.menu_2.addAction(self.actionStartProcess)
        self.menu_2.addAction(self.actionStartExtractProcess)
        self.menu_2.addAction(self.actionStartRenderProcess)
        self.menu_2.addAction(self.actionStopProcess)
        self.menu_2.addSeparator()
        self.menu_2.addAction(self.actionSaveSettings)
        self.menu_2.addAction(self.actionLoadDefaultSettings)
        self.menuAboutSVFI.addAction(self.actionManualGuide)
        self.menuAboutSVFI.addAction(self.actionAbout)
        self.menu_3.addAction(self.actionLangZH)
        self.menu_3.addAction(self.actionLangEN)
        self.menubar.addAction(self.menu.menuAction())
        self.menubar.addAction(self.menu_2.menuAction())
        self.menubar.addAction(self.menuAboutSVFI.menuAction())
        self.menubar.addAction(self.menu_3.menuAction())

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        self.toolBox.setCurrentIndex(3)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        MainWindow.setTabOrder(self.tabWidget, self.AutoSet)
        MainWindow.setTabOrder(self.AutoSet, self.StartPoint)
        MainWindow.setTabOrder(self.StartPoint, self.EndPoint)
        MainWindow.setTabOrder(self.EndPoint, self.StartChunk)
        MainWindow.setTabOrder(self.StartChunk, self.StartFrame)
        MainWindow.setTabOrder(self.StartFrame, self.RefreshStartInfo)
        MainWindow.setTabOrder(self.RefreshStartInfo, self.ScedetChecker)
        MainWindow.setTabOrder(self.ScedetChecker, self.ScdetSelector)
        MainWindow.setTabOrder(self.ScdetSelector, self.UseFixedScdet)
        MainWindow.setTabOrder(self.UseFixedScdet, self.ScdetMaxDiffSelector)
        MainWindow.setTabOrder(self.ScdetMaxDiffSelector, self.DupFramesTSelector)
        MainWindow.setTabOrder(self.DupFramesTSelector, self.ScdetUseMix)
        MainWindow.setTabOrder(self.ScdetUseMix, self.ResizeTemplate)
        MainWindow.setTabOrder(self.ResizeTemplate, self.ResizeWidthSettings)
        MainWindow.setTabOrder(self.ResizeWidthSettings, self.ResizeHeightSettings)
        MainWindow.setTabOrder(self.ResizeHeightSettings, self.CropWidthpSettings)
        MainWindow.setTabOrder(self.CropWidthpSettings, self.UseAiSR)
        MainWindow.setTabOrder(self.UseAiSR, self.UseCRF)
        MainWindow.setTabOrder(self.UseCRF, self.CRFSelector)
        MainWindow.setTabOrder(self.CRFSelector, self.UseTargetBitrate)
        MainWindow.setTabOrder(self.UseTargetBitrate, self.BitrateSelector)
        MainWindow.setTabOrder(self.BitrateSelector, self.HwaccelSelector)
        MainWindow.setTabOrder(self.HwaccelSelector, self.EncoderSelector)
        MainWindow.setTabOrder(self.EncoderSelector, self.PresetSelector)
        MainWindow.setTabOrder(self.PresetSelector, self.QuickExtractChecker)
        MainWindow.setTabOrder(self.QuickExtractChecker, self.RenderGapSelector)
        MainWindow.setTabOrder(self.RenderGapSelector, self.BufferSizeSelector)
        MainWindow.setTabOrder(self.BufferSizeSelector, self.slowmotion)
        MainWindow.setTabOrder(self.slowmotion, self.GifInput)
        MainWindow.setTabOrder(self.GifInput, self.DebugChecker)
        MainWindow.setTabOrder(self.DebugChecker, self.GifOutput)
        MainWindow.setTabOrder(self.GifOutput, self.GifButton)
        MainWindow.setTabOrder(self.GifButton, self.ConcatInputV)
        MainWindow.setTabOrder(self.ConcatInputV, self.ConcatInputA)
        MainWindow.setTabOrder(self.ConcatInputA, self.OutputConcat)
        MainWindow.setTabOrder(self.OutputConcat, self.ConcatButton)
        MainWindow.setTabOrder(self.ConcatButton, self.OutputFolder)
        MainWindow.setTabOrder(self.OutputFolder, self.InputButton)
        MainWindow.setTabOrder(self.InputButton, self.InputDirButton)
        MainWindow.setTabOrder(self.InputDirButton, self.OutputButton)
        MainWindow.setTabOrder(self.OutputButton, self.ShowAdvance)
        MainWindow.setTabOrder(self.ShowAdvance, self.SaveAudioChecker)
        MainWindow.setTabOrder(self.SaveAudioChecker, self.ImgOutputChecker)
        MainWindow.setTabOrder(self.ImgOutputChecker, self.InputFPS)
        MainWindow.setTabOrder(self.InputFPS, self.ExpSelecter)
        MainWindow.setTabOrder(self.ExpSelecter, self.OutputFPS)
        MainWindow.setTabOrder(self.OutputFPS, self.OutputSettingsButton)
        MainWindow.setTabOrder(self.OutputSettingsButton, self.OptionCheck)
        MainWindow.setTabOrder(self.OptionCheck, self.AdvanceSettingsArea)
        MainWindow.setTabOrder(self.AdvanceSettingsArea, self.ClearInputButton)
        MainWindow.setTabOrder(self.ClearInputButton, self.LoadCurrentSettings)
        MainWindow.setTabOrder(self.LoadCurrentSettings, self.InputFileName)
        MainWindow.setTabOrder(self.InputFileName, self.SaveCurrentSettings)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.InputLabel.setToolTip(_translate("MainWindow", "<html><head/><body><p>条目勾亮说明设置已保存</p><p>切换条目或Ctrl+S以保存当前条目设置<span style=\" font-weight:600;\">（无需点勾）</span></p><p><span style=\" font-weight:600;\">仅支持视频或图片序列输入，不支持单张图片输入！</span></p></body></html>"))
        self.InputLabel.setText(_translate("MainWindow", "输入文件或文件夹 (?)"))
        self.tutorialLinkButton.setText(_translate("MainWindow", "点击查看使用教程"))
        self.ClearInputButton.setText(_translate("MainWindow", "清除输入列表"))
        self.InputFileName.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:600;\">“-”</span>号为删除当前任务条目（Remove）</p><p><span style=\" font-weight:600;\">“+”</span>号为以当前任务条目为基础复制生成相同任务（Duplicate）</p></body></html>"))
        self.OutputLabel.setText(_translate("MainWindow", "输出文件夹："))
        self.OutputFolder.setPlaceholderText(_translate("MainWindow", "拖入补帧项目输出的文件夹路径（剩余磁盘空间建议20G+）"))
        self.InputButton.setToolTip(_translate("MainWindow", "<html><head/><body><p><br/></p></body></html>"))
        self.InputButton.setText(_translate("MainWindow", "输入视频文件 (?)"))
        self.InputDirButton.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:600;\">不支持交错或带有透明通道的图片</span></p><p>如要求输入有序，文件命名<span style=\" font-weight:600;\">应等长</span>，如<br/>input_0001.png, input_0002.png, ...</p><p>以下输入不保证输入有序：</p><p>1.png, 2.png, ..., 10.png, 11.png</p><p>应改为：</p><p>01.png, 02.png, ..., 10.png</p></body></html>"))
        self.InputDirButton.setText(_translate("MainWindow", "输入图片序列 (?)"))
        self.OutputButton.setToolTip(_translate("MainWindow", "<html><head/><body><p>当输出为图片序列，最终输出位置为指定输出文件夹<span style=\" font-weight:600;\">内</span>一个带有<span style=\" font-weight:600;\">输入文件夹名称</span>的子文件夹</p></body></html>"))
        self.OutputButton.setText(_translate("MainWindow", "设置输出文件夹 (?)"))
        self.ShowAdvance.setText(_translate("MainWindow", "显示高级选项"))
        self.UseNCNNButton.setToolTip(_translate("MainWindow", "<html><head/><body><p>使用检测到的A卡或核显进行补帧任务</p><p>使用NCNN架构</p></body></html>"))
        self.UseNCNNButton.setText(_translate("MainWindow", "使用A卡或核显 (?)"))
        self.label_12.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:600;\">如果音频合并出现问题，请尝试更换输出文件格式</span></p><p><span style=\" font-weight:600;\">mov</span>兼容大多数音视频轨，但对不同格式的字幕轨（ass等）兼容欠佳；</p><p><span style=\" font-weight:600;\">mkv</span>兼容大多数字幕轨，但不支持pcm音频输出（这种情况请改为mov）</p><p><span style=\" font-weight:600;\">mp4</span>支持流式传输，不支持truehd、dts等特种音频格式包装</p><p><span style=\" font-weight:600;\">请尽量使用输入的文件格式作为输出文件格式</span></p></body></html>"))
        self.label_12.setText(_translate("MainWindow", "输出文件格式 (!)"))
        self.SaveAudioChecker.setText(_translate("MainWindow", "导出带音频、字幕"))
        self.ImgOutputChecker.setToolTip(_translate("MainWindow", "<html><head/><body><p>输出图片序列，输出格式支持jpg、png、tiff等</p><p><span style=\" font-weight:600;\">命名格式:0&gt;8d,如 00000008.png</span></p></body></html>"))
        self.ImgOutputChecker.setText(_translate("MainWindow", "输出图片序列 (?)"))
        self.ExtSelector.setToolTip(_translate("MainWindow", "<html><head/><body><p>如果音频合并出现问题，请尝试更换输出文件格式</p><p><span style=\" font-weight:600;\">mov</span>兼容大多数音视频轨，但对字幕轨兼容不太好；</p><p><span style=\" font-weight:600;\">mkv</span>兼容大多数字幕轨，但不支持pcm音频输出<span style=\" font-weight:600;\">（这种情况请改为mov）</span></p><p><span style=\" font-weight:600;\">mp4</span>支持流式传输，不支持truehd、dts等特种音频格式包装</p></body></html>"))
        self.ExtSelector.setItemText(0, _translate("MainWindow", "mp4"))
        self.ExtSelector.setItemText(1, _translate("MainWindow", "mkv"))
        self.ExtSelector.setItemText(2, _translate("MainWindow", "mov"))
        self.InputFPSReminder.setText(_translate("MainWindow", "输入帧率"))
        self.InputFPS.setPlaceholderText(_translate("MainWindow", "一定要确认输入帧率！"))
        self.InterpExpReminder.setToolTip(_translate("MainWindow", "<html><head/><body><p>1. 输入为视频，输出为视频或图片序列：实际输出帧率以<span style=\" font-weight:600;\">输出帧率</span>为准，与补帧倍率无关：</p><p>一个长度为1s的24fps输入视频在补帧倍率为x2，输出帧率为60的情况下，会输出<span style=\" font-weight:600;\">60fps的视频或者60张图片</span>；</p><p>2. 输入为图片序列，输出为视频：每张输入图片会<span style=\" font-weight:600;\">按照补帧倍率重复N次</span>，再输入到软件进行补帧，并被压制为<span style=\" font-weight:600;\">输出帧率</span>：</p><p>一个24fps，有24张图片的图片序列在补帧倍率为x2，输出帧率为60的情况下，会输出60fps的视频，且<span style=\" font-weight:600;\">大于48fps的部分为重复帧</span>；</p><p>3. 输入为图片序列，输出为图片序列：每张输入图片会<span style=\" font-weight:600;\">按照补帧倍率重复N次</span>，并按照补帧倍率输出：</p><p>一个24fps，有24张图片的图片序列在补帧倍率为x2，输出帧率为60的情况下，会<span style=\" font-weight:600;\">输出48张图片</span></p></body></html>"))
        self.InterpExpReminder.setText(_translate("MainWindow", "补帧倍率 (!)"))
        self.ExpSelecter.setToolTip(_translate("MainWindow", "<html><head/><body><p>在输出图片序列时，将按照此处设置的补帧倍率对图片序列补帧并输出</p><p>输入为图片序列且输出为视频时，软件将按照补帧倍率倍帧后进行补帧，并按照右侧的输出帧率输出视频</p></body></html>"))
        self.ExpSelecter.setItemText(0, _translate("MainWindow", "x1"))
        self.ExpSelecter.setItemText(1, _translate("MainWindow", "x2"))
        self.ExpSelecter.setItemText(2, _translate("MainWindow", "x4"))
        self.ExpSelecter.setItemText(3, _translate("MainWindow", "x8"))
        self.ExpSelecter.setItemText(4, _translate("MainWindow", "x16"))
        self.ExpSelecter.setItemText(5, _translate("MainWindow", "x32"))
        self.ExpSelecter.setItemText(6, _translate("MainWindow", "x64"))
        self.OutputFPSReminder.setText(_translate("MainWindow", "输出帧率"))
        self.OutputFPS.setPlaceholderText(_translate("MainWindow", "一定要确认输出帧率"))
        self.SettingsPresetsFluency.setItemText(0, _translate("MainWindow", "常规丝滑"))
        self.SettingsPresetsFluency.setItemText(1, _translate("MainWindow", "加强丝滑"))
        self.SettingsPresetsFluency.setItemText(2, _translate("MainWindow", "极致丝滑"))
        self.SettingsPresetsApplyButton.setToolTip(_translate("MainWindow", "<html><head/><body><p>使用SVFI自带的补帧预设</p><p><span style=\" font-weight:600;\">设置变动将反映在高级设置中</span></p><p><span style=\" font-weight:600;\">有景深的输入视作真人，无景深的输入视作动漫</span></p></body></html>"))
        self.SettingsPresetsApplyButton.setText(_translate("MainWindow", "应用预设 (?)"))
        self.SettingsPresetsInputs.setItemText(0, _translate("MainWindow", "动漫"))
        self.SettingsPresetsInputs.setItemText(1, _translate("MainWindow", "真人"))
        self.SettingsPresetsSQ.setItemText(0, _translate("MainWindow", "质量优先"))
        self.SettingsPresetsSQ.setItemText(1, _translate("MainWindow", "常规质量"))
        self.SettingsPresetsSQ.setItemText(2, _translate("MainWindow", "速度优先"))
        self.SettingsPresetsSQ.setItemText(3, _translate("MainWindow", "极致速度"))
        self.presetActionButton.setText(_translate("MainWindow", "ToPreset"))
        self.presetActionButton.setShortcut(_translate("MainWindow", "Ctrl+8"))
        self.resolutionActionButton.setText(_translate("MainWindow", "ToResolution"))
        self.resolutionActionButton.setShortcut(_translate("MainWindow", "Ctrl+5"))
        self.homeActionButton.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:12pt; color:#000000;\">本软件 </span><span style=\" font-size:12pt; font-style:italic; color:#000000;\">Squirrel Video Frame Interpolation</span></p><p><span style=\" color:#000000;\">是基于</span><span style=\" font-weight:600; color:#000000;\">RIFE: Real-Time Intermediate Flow Estimation for Video Frame Interpolation</span><span style=\" color:#000000;\"> AI补帧算法的可视化图形界面集成.</span></p><p><span style=\" font-weight:600; color:#000000;\">RIFE算法作者</span><span style=\" color:#000000;\"> Zhewei Huang, Tianyuan Zhang, Wen Heng, Boxin Shi, Shuchang Zhou </span></p><p><span style=\" color:#000000;\">https://github.com/hzwer/arXiv2020-RIFE</span></p><p><span style=\" font-weight:600; color:#000000;\">SVFI作者</span><span style=\" color:#000000;\"> YiWeiHuang-stack, Justin62628, 穆氏, Misaka, NULL204, ABlyh-LEO</span></p><p><span style=\" color:#000000;\">https://github.com/Justin62628/Squirrel-RIFE</span></p><p><span style=\" font-weight:600; color:#000000;\">参考库：</span></p><p><span style=\" color:#000000;\">- NCNN Support: </span></p><p><span style=\" color:#000000;\">https://github.com/nihui/rife-ncnn-vulkan</span></p><p><br/></p><p><span style=\" color:#000000;\">- SWIG Wraps: </span></p><p><span style=\" color:#000000;\">https://github.com/orgs/media2x/repositories</span></p><p><br/></p><p><span style=\" color:#000000;\">- UI Design: </span></p><p><span style=\" color:#000000;\">https://github.com/shuoGG1239/QCandyUi</span></p><p><br/></p><p><span style=\" color:#000000;\">- Steamworks Interface: </span></p><p><span style=\" color:#000000;\">https://github.com/philippj/SteamworksPy</span></p><p><br/></p><p><span style=\" color:#000000;\">- Encode Supports: </span></p><p><span style=\" color:#000000;\">https://github.com/FFmpeg/FFmpeg</span></p><p><span style=\" color:#000000;\">https://github.com/rigaya/QSVEnc</span></p><p><span style=\" color:#000000;\">https://github.com/rigaya/NVEnc</span></p><p><span style=\" color:#000000;\">https://github.com/quietvoid/dovi_tool</span></p><p><span style=\" color:#000000;\">https://github.com/DolbyLaboratories/dlb_mp4base</span></p><p><span style=\" color:#000000;\">https://github.com/quietvoid/hdr10plus_parser</span></p><p><br/></p><p><span style=\" color:#000000;\">- Super Resolution Algorithm</span></p><p><span style=\" color:#000000;\">https://github.com/nagadomi/waifu2x</span></p><p><span style=\" color:#000000;\">https://github.com/jixiaozhong/RealSR</span></p><p><span style=\" color:#000000;\">https://github.com/xinntao/Real-ESRGAN</span></p></body></html>"))
        self.homeActionButton.setText(_translate("MainWindow", "ToHome"))
        self.homeActionButton.setShortcut(_translate("MainWindow", "Ctrl+H"))
        self.outputActionButton.setText(_translate("MainWindow", "ToOutput"))
        self.outputActionButton.setShortcut(_translate("MainWindow", "Ctrl+P"))
        self.rifeActionButton.setText(_translate("MainWindow", "ToRife"))
        self.rifeActionButton.setShortcut(_translate("MainWindow", "Ctrl+7"))
        self.renderActionButton.setText(_translate("MainWindow", "ToRender"))
        self.renderActionButton.setShortcut(_translate("MainWindow", "Ctrl+6"))
        self.resumeActionButton.setText(_translate("MainWindow", "ToResume"))
        self.resumeActionButton.setShortcut(_translate("MainWindow", "Ctrl+3"))
        self.scdetActionButton.setText(_translate("MainWindow", "ToScdet"))
        self.scdetActionButton.setShortcut(_translate("MainWindow", "Ctrl+4"))
        self.toolboxActionButton.setText(_translate("MainWindow", "ToToolBox"))
        self.toolboxActionButton.setShortcut(_translate("MainWindow", "Ctrl+9"))
        self.StartExtractButton.setToolTip(_translate("MainWindow", "<html><head/><body><p>拆帧<span style=\" font-weight:600;\">选中输入</span>到输出文件夹（可用于GIF拆帧）</p><p>请先勾选“输出图片序列”，并选择要输出的文件格式</p><p><span style=\" font-weight:600;\">若未勾选“输出图片序列”，输出将自动改为png图片序列</span></p></body></html>"))
        self.StartExtractButton.setText(_translate("MainWindow", "一键拆帧 (?)"))
        self.AllInOne.setText(_translate("MainWindow", "一键补帧"))
        self.StartRenderButton.setToolTip(_translate("MainWindow", "<html><head/><body><p>对于专业版，设置超分选项可以对输入内容超分</p><p>若不开启AI超分功能，仅更改输出分辨率无超分效果。</p><p>压制模式下将跳过补帧，偏好设置选择<span style=\" font-weight:600;\">原味压制模式</span>将跳过转场检测及重复帧去除步骤</p><p><span style=\" font-weight:600;\">特别注意：</span>输出帧率为左栏“输入帧率”设置的数值</p></body></html>"))
        self.StartRenderButton.setText(_translate("MainWindow", "一键压制 (?)"))
        self.SaveCurrentSettings.setToolTip(_translate("MainWindow", "<html><head/><body><p>为该输入设置单独的参数文件；默认按照全局参数输出</p></body></html>"))
        self.SaveCurrentSettings.setText(_translate("MainWindow", "单独保存当前选中的输入设置"))
        self.LoadCurrentSettings.setText(_translate("MainWindow", "载入当前选中输入的设置"))
        self.OutputSettingsButton.setText(_translate("MainWindow", "导出当前设置到文本文件"))
        self.DebugChecker.setToolTip(_translate("MainWindow", "<html><head/><body><p>调试模式：</p><p><span style=\" font-weight:600;\">该模式启用后将不会弹出必要的启动信息提示窗口，并在输出窗口显示调试信息</span></p></body></html>"))
        self.DebugChecker.setText(_translate("MainWindow", "Debug (?)"))
        self.AdvanceSettingsLabel.setText(_translate("MainWindow", "高级设置"))
        self.EndPoint.setDisplayFormat(_translate("MainWindow", "HH:mm:ss"))
        self.label_22.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:600;\">进度恢复输入规则：</span></p><p>输出文件夹的最后一个chunk，第一个数字+1</p><p>e.g. 最后一个chunk是chunk-003-333-335.mp4，此栏输入004</p><p><span style=\" font-weight:600;\">-1 为自动识别进度（请确保任务id相同）</span></p></body></html>"))
        self.label_22.setText(_translate("MainWindow", "起始区块计数：(?)"))
        self.label_21.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:600;\">进度恢复输入规则：</span></p><p>输出文件夹的最后一个chunk，第三个数字+1</p><p>e.g. 最后一个chunk是chunk-003-333-335.mp4，此栏输入336<br/><span style=\" font-weight:600;\">-1 为自动识别进度（请确保任务id相同）</span></p></body></html>"))
        self.label_21.setText(_translate("MainWindow", "起始输入帧数：(?)"))
        self.EndPointLabel.setText(_translate("MainWindow", "结束补帧时刻："))
        self.StartPoint.setDisplayFormat(_translate("MainWindow", "HH:mm:ss"))
        self.AutoSet.setText(_translate("MainWindow", "自动寻找进度"))
        self.AutoSetReminder.setToolTip(_translate("MainWindow", "<html><head/><body><p>根据已经生成的视频块信息进行推算，可能存在重复补帧的情况，但不影响最终结果。</p><p>对于队列输入（输入数&gt;1），请确保每个任务条目正确设置工作恢复参数（分别点击<span style=\" font-weight:600;\">自动寻找进度</span>的按钮），否则软件将自动识别工作进度并进行补帧</p><p><span style=\" font-weight:600;\">图片序列输入需要手动输入恢复进度参数</span></p></body></html>"))
        self.AutoSetReminder.setText(_translate("MainWindow", "自动设置 (?)"))
        self.StartPointLabel.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:600;\">时：分：秒</span></p><p>对输入进行指定时间范围内的补帧</p><p><span style=\" font-weight:600;\">不支持工作进度恢复</span></p></body></html>"))
        self.StartPointLabel.setText(_translate("MainWindow", "起始补帧时刻：(?)"))
        self.RefreshStartInfo.setText(_translate("MainWindow", "复原至起点"))
        self.ResumeRiskChecker.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:600;\">仅针对视频素材，不推荐开启</span></p><p>开启此项，将能够较快地恢复工作进度，但并不保证精确，也不保证输出结果音画同步；</p><p>精确度视具体视频素材的压缩率而定</p></body></html>"))
        self.ResumeRiskChecker.setText(_translate("MainWindow", "风险模式 (?)"))
        self.toolBox.setItemText(self.toolBox.indexOf(self.ResumeSettings), _translate("MainWindow", "工作状态恢复"))
        self.ScdetModeLabel.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:600;\">旧：</span></p><p>旧转场识别模式<br/><span style=\" font-weight:600;\">3D输入</span>建议值为<span style=\" font-weight:600;\">9~15</span></p><p><span style=\" font-weight:600;\">2D输入</span>建议值为<span style=\" font-weight:600;\">20左右</span></p><p><br/></p><p><span style=\" font-weight:600;\">新：</span></p><p><span style=\" font-weight:600;\">别用</span></p></body></html>"))
        self.ScdetModeLabel.setText(_translate("MainWindow", "选择转场识别模式"))
        self.ScdetMode.setItemText(0, _translate("MainWindow", "旧"))
        self.ScdetMode.setItemText(1, _translate("MainWindow", "新（待调整）"))
        self.ScedetChecker.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:600;\">输入参考值为9~15</span></p><p>电影（长时间）实拍（3D）补帧项目：<span style=\" font-weight:600;\">建议值10~12</span></p><p>快速运动画面：<span style=\" font-weight:600;\">建议值12~15</span></p><p>2D（动漫等，不包括3D动画）输入：<span style=\" font-weight:600;\">建议值10~15</span></p><p>画面平均运动速度越大，取值越小</p></body></html>"))
        self.ScedetChecker.setText(_translate("MainWindow", "开启转场识别 (?)"))
        self.DupRmMode.setItemText(0, _translate("MainWindow", "不去除重复帧"))
        self.DupRmMode.setItemText(1, _translate("MainWindow", "单一识别"))
        self.DupRmMode.setItemText(2, _translate("MainWindow", "去除一拍二"))
        self.DupRmMode.setItemText(3, _translate("MainWindow", "去除一拍三"))
        self.DupRmMode.setItemText(4, _translate("MainWindow", "去除一拍四"))
        self.DupRmMode.setItemText(5, _translate("MainWindow", "去除一拍五"))
        self.DupRmMode.setItemText(6, _translate("MainWindow", "去除一拍六"))
        self.DupRmMode.setItemText(7, _translate("MainWindow", "去除一拍七"))
        self.DupFramesTSelector.setToolTip(_translate("MainWindow", "<html><head/><body><p><br/></p></body></html>"))
        self.UseSobelChecker.setToolTip(_translate("MainWindow", "<html><head/><body><p>使用Sobel进行边缘检测（复合canny）</p><p>可减少背景平移误判，但会降低对于景深较大的一拍N运动画面判断正确率</p><p><span style=\" font-weight:600;\">推荐开启试试</span></p></body></html>"))
        self.UseSobelChecker.setText(_translate("MainWindow", "Sobel (?)"))
        self.DupRmLabel.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-family:\'微软雅黑\',\'sans-serif\'; font-weight:600;\">单一识别：</span></p><p><span style=\" font-family:\'微软雅黑\',\'sans-serif\';\">根据帧差判断，可用于解决压制错误等原因造成的视频卡顿等问题</span></p><p><span style=\" font-family:\'微软雅黑\',\'sans-serif\';\">轻度流畅优化：</span><span style=\" font-family:\'微软雅黑\',\'sans-serif\'; font-weight:600;\">0.1~1.0</span></p><p><span style=\" font-family:\'微软雅黑\',\'sans-serif\';\">中度流畅优化：</span><span style=\" font-family:\'微软雅黑\',\'sans-serif\'; font-weight:600;\">1.0~2.0</span></p><p><span style=\" font-family:\'微软雅黑\',\'sans-serif\';\">重度优化（会破坏运动节奏，并导致人物嘴部动画鬼畜，但很流畅）：</span><span style=\" font-family:\'微软雅黑\',\'sans-serif\'; font-weight:600;\">2.0及以上</span></p><p><span style=\" font-family:\'微软雅黑\',\'sans-serif\'; font-weight:600;\">去除一拍N模式：</span></p><p><span style=\" font-family:\'微软雅黑\',\'sans-serif\'; font-weight:600;\">自研算法，仅适用于动漫去重</span></p><p><span style=\" font-family:\'微软雅黑\',\'sans-serif\';\">去除一拍二：</span><span style=\" font-family:\'微软雅黑\',\'sans-serif\'; font-weight:600;\">目前综合效果最好 普适性最佳 的动漫重复帧去除算法</span></p><p><span style=\" font-family:\'微软雅黑\',\'sans-serif\';\">去除一拍三：比一拍二更激进</span></p><p><span style=\" font-family:\'微软雅黑\',\'sans-serif\';\">去除一拍四——去除一拍七：在多数情况下过于激进，请谨慎选择</span></p><p><span style=\" font-family:\'微软雅黑\',\'sans-serif\';\">PS：</span><span style=\" font-family:\'微软雅黑\',\'sans-serif\'; font-weight:600;\">一拍N模式暂为专业版独有</span></p></body></html>"))
        self.DupRmLabel.setText(_translate("MainWindow", "重复帧去除 (?)"))
        self.ScdetUseMix.setToolTip(_translate("MainWindow", "<html><head/><body><p>若识别到转场，对转场处的帧序列使用帧混合</p><p>勾选此选项可缓解转场识别误判导致的<span style=\" font-weight:600;\">卡顿问题，推荐用于混剪作品</span></p></body></html>"))
        self.ScdetUseMix.setText(_translate("MainWindow", "转场使用帧混合 (?)"))
        self.ScdetOutput.setToolTip(_translate("MainWindow", "<html><head/><body><p>在项目文件夹下输出识别到的转场帧及其前一帧</p></body></html>"))
        self.ScdetOutput.setText(_translate("MainWindow", "输出转场帧 (?)"))
        self.ScdetMaxDiffSelector.setToolTip(_translate("MainWindow", "<html><head/><body><p>勾选此项，将使用固定单一画面相似度指标进行转场识别</p><p>建议值：<span style=\" font-weight:600;\">40~80</span></p></body></html>"))
        self.UseFixedScdet.setToolTip(_translate("MainWindow", "<html><head/><body><p>勾选此项，将使用固定单一画面相似度指标进行转场识别</p><p>建议值：<span style=\" font-weight:600;\">20~40</span></p><p><span style=\" font-weight:600;\">需配合“开启转场识别”使用，不建议勾选此项</span></p></body></html>"))
        self.UseFixedScdet.setText(_translate("MainWindow", "使用固定转场识别 (?)"))
        self.ScdetSelector.setToolTip(_translate("MainWindow", "<html><head/><body><p>通过自研算法进行转场识别，此项为动态阈值，</p></body></html>"))
        self.ScdetFlowLen.setItemText(0, _translate("MainWindow", "2D输入"))
        self.ScdetFlowLen.setItemText(1, _translate("MainWindow", "3D输入"))
        self.toolBox.setItemText(self.toolBox.indexOf(self.ScdetSettings), _translate("MainWindow", "转场识别与动漫优化"))
        self.label_8.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:600;\">CUDA系超分：（仅N卡可用）</span></p><p>waifuCuda适用于2D动漫输入，是效果、速度兼得的超分算法</p><p><span style=\" font-weight:600;\">realESR</span>适用于2D、3D输入，超分效果最好，其中GAN渲染效果最清晰，画面偏向于细节保留；Net输出较模糊，画面偏向涂抹与结构恢复</p><p><span style=\" font-weight:600;\">NCNN系超分：（N卡A卡皆可用）</span></p><p><span style=\" font-weight:600;\">waifu2x</span>适用于2D动漫输入，速度较慢</p><p><span style=\" font-weight:600;\">PS：realESR非常慢（是TVE的1/10速度），但动漫超分效果比TVE好，效果普适性极强</span></p></body></html>"))
        self.label_8.setText(_translate("MainWindow", "超分算法 (?)"))
        self.AiSrSelector.setItemText(0, _translate("MainWindow", "waifu2x"))
        self.AiSrSelector.setItemText(1, _translate("MainWindow", "RealESRGAN"))
        self.label_9.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:600;\">waifu2x:</span></p><p>cunet模型用于动漫超分</p><p>photo模型用于实拍</p><p>style anime用于老动漫</p><p><span style=\" font-weight:600;\">realESR：</span></p><p>GAN清晰，偏向于脑补；Net模糊，偏向于涂抹</p><p>2x和4x模型无明显速度差异，但建议使用与输出分辨率最邻近的倍率模型<br/>如，输入为270p，输出为1080p，建议使用4x模型；输入为270p，输出为540p，建议使用2x模型</p><p><span style=\" font-weight:600;\">waifuCuda：</span></p><p>无特殊说明</p></body></html>"))
        self.label_9.setText(_translate("MainWindow", "超分模型 (?)"))
        self.AiSrModuleExpReminder.setToolTip(_translate("MainWindow", "<html><head/><body><p>所选超分模型的固有超分倍数</p></body></html>"))
        self.AiSrModuleExpReminder.setText(_translate("MainWindow", "超分模型倍数 (?):"))
        self.AiSrModuleExpDisplay.setToolTip(_translate("MainWindow", "<html><head/><body><p>单位：像素</p><p><span style=\" font-weight:600;\">宽高必须为偶数！</span></p><p>输入为图片序列时，SVFI将不会自动检测宽高（此时显示为0代表自动）</p><p><span style=\" font-weight:600;\">输入为图片序列且开启AI超分情况的特别说明：</span></p><p>若要将SVFI用于<span style=\" font-weight:600;\">分辨率不同</span>的图片序列超分，请将<span style=\" font-weight:600;\">宽高分别设置为0</span>，并在上面的预设框选择&gt;100%的倍率。否则（统一分辨率）请填入要放缩至的分辨率</p><p><span style=\" font-weight:600;\">注意：</span></p><p>若此处的宽高皆不为0，SVFI将会把所有输入（先超分再）放缩至<span style=\" font-weight:600;\">指定的非零分辨率</span>输出。</p><p>具体地，对于一个1080p的视频使用x4模型超分至4K，SVFI将<span style=\" font-weight:600;\">先把输入放缩至540p</span>并使用x4模型超分至4K输出；</p><p>对于一个540p的视频使用x2模型超分至4K，SVFI将直接使用x4模型<span style=\" font-weight:600;\">超分两次</span>至4K输出，可以注意到处理时间明显较上者长</p></body></html>"))
        self.AiSrModuleExpDisplay.setText(_translate("MainWindow", "Unknown"))
        self.AiSrTransferResolution.setToolTip(_translate("MainWindow", "<html><head/><body><p>对输入源进行超分前，先将<span style=\" font-weight:600;\">分辨率按比例缩放，缩放后的分辨率为转移分辨率</span>；</p><p>此操作可以减小运算量，加快超分速度，但可能造成画面纹理损失。</p><p><span style=\" font-weight:600;\">转移分辨率比 = 转移分辨率 / 输入分辨率</span></p><p><span style=\" font-weight:600;\">自动：</span>根据选择的超分模型自动选择缩放比例</p><p><span style=\" font-weight:600;\">100%：</span>超分前不对输入源缩放</p><p><span style=\" font-weight:600;\">50%：</span>超分前先将输入源缩放至50%</p><p><span style=\" font-weight:600;\">例：</span></p><p>1.1 选择自动模式，当输出分辨率倍数为200%，选择2x模型，则此项自动选择100%；</p><p>1.2 选择自动模式，当输出分辨率倍数为200%，选择4x模型，则此项自动选择50%；</p><p>2.1 选择50%，当输出分辨率预设为200%，若选择4x模型，软件先对输入缩放50%，经超分4倍后变为两倍的输入分辨率</p><p>1080p -&gt; 540p -&gt; 2160p = 1080p * 2</p></body></html>"))
        self.AiSrTransferResolution.setText(_translate("MainWindow", "转移分辨率比 (!)"))
        self.TransferRatioSettings.setItemText(0, _translate("MainWindow", "自动"))
        self.TransferRatioSettings.setItemText(1, _translate("MainWindow", "100%"))
        self.TransferRatioSettings.setItemText(2, _translate("MainWindow", "75%"))
        self.TransferRatioSettings.setItemText(3, _translate("MainWindow", "50%"))
        self.TransferRatioSettings.setItemText(4, _translate("MainWindow", "25%"))
        self.SrModeLabel.setText(_translate("MainWindow", "超分模式"))
        self.AiSrMode.setItemText(0, _translate("MainWindow", "先超分后补帧"))
        self.AiSrMode.setItemText(1, _translate("MainWindow", "先补帧后超分"))
        self.TileSizeLabel.setToolTip(_translate("MainWindow", "<html><head/><body><p>使用<span style=\" font-weight:600;\">realESR或waifuCuda超分算法</span>时酌情使用。</p><p>选项说明：将输入进行超分前，会将输入切割为宽为“切割块大小”的正方形，经超分后拼接。</p><p>若不使用此选项，<span style=\" font-weight:600;\">即选择“无”</span>，输入将不经过切割，原样超分，最大发挥超分算法效能，<span style=\" font-weight:600;\">此时超分满速运行、输出效果最佳</span>，但爆显存可能较大（超分算法显存使用无上限）</p><p>该选项选择合适的值将提升超分速度。</p><p>选项已列出常用的超分不爆显存的切割块大小。</p><p>建议先选择无，若爆显存则使用其他值。</p></body></html>"))
        self.TileSizeLabel.setText(_translate("MainWindow", "切割块大小 (!)"))
        self.SrTileSizeSettings.setItemText(0, _translate("MainWindow", "无"))
        self.SrTileSizeSettings.setItemText(1, _translate("MainWindow", "自定义"))
        self.SrTileSizeSettings.setItemText(2, _translate("MainWindow", "2G显存-100"))
        self.SrTileSizeSettings.setItemText(3, _translate("MainWindow", "4G显存-400"))
        self.SrTileSizeSettings.setItemText(4, _translate("MainWindow", "6G显存-1000"))
        self.SrTileSizeSettings.setItemText(5, _translate("MainWindow", "8G显存-1200"))
        self.SrTileSizeSettings.setItemText(6, _translate("MainWindow", "12G显存-2000"))
        self.RealESRFp16Checker.setToolTip(_translate("MainWindow", "<html><head/><body><p>对CUDA系超分算法开启半精度，可以有效减少显存占用，从而避免指定切割块大小</p><p><span style=\" font-weight:600;\">建议开启</span></p></body></html>"))
        self.RealESRFp16Checker.setText(_translate("MainWindow", "超分使用半精度 (?)"))
        self.UseAiSR.setToolTip(_translate("MainWindow", "<html><head/><body><p>使用流行的超分算法对输入视频或图片序列进行补帧</p></body></html>"))
        self.UseAiSR.setText(_translate("MainWindow", "使用AI超分 (?)"))
        self.ResizeTemplate.setToolTip(_translate("MainWindow", "<html><head/><body><p>画面分辨率预设</p><p>当输入为图片序列，<span style=\" font-weight:600;\">开启AI超分</span>（专业/内测版），且未指定输出分辨率（输出文件分辨率宽高皆为0）时</p><p>若此项倍率小于超分模型的最低倍率（如此项为200%，但使用RealESR 4x模型）<br/>最终输出的分辨率是输入分辨率的最低倍率倍</p><p>其他情况（输入为视频，或图片序列指定输出分辨率输出），输出分辨率为指定分辨率</p></body></html>"))
        self.ResizeTemplate.setItemText(0, _translate("MainWindow", "Custom"))
        self.ResizeTemplate.setItemText(1, _translate("MainWindow", "100%"))
        self.ResizeTemplate.setItemText(2, _translate("MainWindow", "200%"))
        self.ResizeTemplate.setItemText(3, _translate("MainWindow", "400%"))
        self.ResizeTemplate.setItemText(4, _translate("MainWindow", "50%"))
        self.ResizeTemplate.setItemText(5, _translate("MainWindow", "25%"))
        self.ResizeTemplate.setItemText(6, _translate("MainWindow", "SD 480p"))
        self.ResizeTemplate.setItemText(7, _translate("MainWindow", "HD 720p"))
        self.ResizeTemplate.setItemText(8, _translate("MainWindow", "FHD 1080p"))
        self.ResizeTemplate.setItemText(9, _translate("MainWindow", "UHD 4K 2160p"))
        self.ResizeTemplate.setItemText(10, _translate("MainWindow", "FUHD 8K 3840p"))
        self.CropReminder.setToolTip(_translate("MainWindow", "<html><head/><body><p>视频宽和高的黑边像素个数，上下-高，左右-宽分别对称</p><p>当不启用AI超分时，</p><p>输出视频宽/高 = <span style=\" font-weight:600;\">输出分辨率</span>的宽/高 - 黑边宽/高 * 2</p><p><span style=\" font-weight:600;\">当启用AI超分时，</span></p><p>输出视频宽/高 = (<span style=\" font-weight:600;\">源分辨率</span>的宽/高 - 黑边宽/高) * <span style=\" font-weight:600;\">转移分辨率比</span></p></body></html>"))
        self.CropReminder.setText(_translate("MainWindow", "黑边长度 (?)"))
        self.label_5.setText(_translate("MainWindow", "高"))
        self.label_7.setText(_translate("MainWindow", "宽"))
        self.label_4.setToolTip(_translate("MainWindow", "只能是双数"))
        self.label_4.setText(_translate("MainWindow", "高"))
        self.label_3.setToolTip(_translate("MainWindow", "只能是双数"))
        self.label_3.setText(_translate("MainWindow", "宽"))
        self.LockWHChecker.setText(_translate("MainWindow", "锁定输入长宽比 (?)"))
        self.ResizeReminder.setToolTip(_translate("MainWindow", "<html><head/><body><p>单位：像素</p><p><span style=\" font-weight:600;\">宽高必须为偶数！</span></p><p>输入为图片序列时，SVFI将不会自动检测宽高（此时显示为0代表自动）</p><p>会在输出视频时将输出缩放为指定分辨率，未指定时输出分辨率为输入的分辨率</p></body></html>"))
        self.ResizeReminder.setText(_translate("MainWindow", "输出文件分辨率 (?)"))
        self.ResizePresetsReminder.setToolTip(_translate("MainWindow", "<html><head/><body><p>输出分辨率下拉框，选择<span style=\" font-weight:600;\">自定义</span>可自行指定输出的分辨率</p></body></html>"))
        self.ResizePresetsReminder.setText(_translate("MainWindow", "输出分辨率预设 (?)"))
        self.toolBox.setItemText(self.toolBox.indexOf(self.OutputResizeSettings), _translate("MainWindow", "输出分辨率设置"))
        self.BufferSizeSelector.setToolTip(_translate("MainWindow", "<html><head/><body><p>防止爆内存，一般不用勾选。<span style=\" font-weight:600;\">专业人士自用</span></p></body></html>"))
        self.label_28.setText(_translate("MainWindow", "G"))
        self.TargetBitrateMeasure.setText(_translate("MainWindow", "M"))
        self.PresetSelector.setToolTip(_translate("MainWindow", "<html><head/><body><p><br/></p></body></html>"))
        self.PresetSelector.setCurrentText(_translate("MainWindow", "slow"))
        self.PresetSelector.setItemText(0, _translate("MainWindow", "slow"))
        self.HwaccelSelector.setItemText(0, _translate("MainWindow", "CPU"))
        self.HwaccelSelector.setItemText(1, _translate("MainWindow", "NVENC"))
        self.HwaccelSelector.setItemText(2, _translate("MainWindow", "QSV"))
        self.HwaccelSelector.setItemText(3, _translate("MainWindow", "NVENCC"))
        self.HwaccelSelector.setItemText(4, _translate("MainWindow", "QSVENCC"))
        self.DefaultEncodePresetChecker.setToolTip(_translate("MainWindow", "<html><head/><body><p>使用ffmpeg默认的编码方案<span style=\" font-weight:600;\">（不使用者佬的压制方案）</span></p><p>者佬的压制方案输出压缩率更高，画质有提升，但部分参数部分cpu不支持</p><p>若遇到Broken Pipe错误，请尝试取消勾选此选项</p></body></html>"))
        self.DefaultEncodePresetChecker.setText(_translate("MainWindow", "默认编码方案 (?)"))
        self.KeepChunksChecker.setText(_translate("MainWindow", "保留中间文件(chunks)"))
        self.QuickExtractChecker.setToolTip(_translate("MainWindow", "<html><head/><body><p>关闭此项，SVFI将采取一系列措施避免输出色偏，但速度较慢</p><p><span style=\" font-weight:600;\">对于HDR输入，强烈建议关闭</span></p><p><span style=\" font-weight:600;\">对于SDR输入，若输出无明显色偏（可自行裁剪一小片段或观察输出的chunk判断），可以开启</span></p></body></html>"))
        self.QuickExtractChecker.setText(_translate("MainWindow", "快速拆帧 (?)"))
        self.FastDenoiseChecker.setToolTip(_translate("MainWindow", "<html><head/><body><p>使用cv2的快速降噪，减少画面噪点</p><p>会显著降低补帧效率</p><p><span style=\" font-weight:600;\">不支持高精度优化工作流</span></p></body></html>"))
        self.FastDenoiseChecker.setText(_translate("MainWindow", "快速降噪 (!)"))
        self.label_25.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-family:\'微软雅黑\',\'sans-serif\'; font-weight:600;\">CPU:</span><span style=\" font-family:\'微软雅黑\',\'sans-serif\';\"> 软件编码</span></p><p><span style=\" font-family:\'微软雅黑\',\'sans-serif\'; font-weight:600;\">NVENC: </span><span style=\" font-family:\'微软雅黑\',\'sans-serif\';\">使用NVIDIA显卡进行硬件编码</span></p><p><span style=\" font-family:\'微软雅黑\',\'sans-serif\'; font-weight:600;\">QSV: </span><span style=\" font-family:\'微软雅黑\',\'sans-serif\';\">使用Intel集显进行硬件编码，编码质量看情况而定。没有Intel集显不要使用此项。</span></p><p><span style=\" font-family:\'微软雅黑\',\'sans-serif\'; font-weight:600;\">软件编码（CPU）：</span><span style=\" font-family:\'微软雅黑\',\'sans-serif\';\">速度慢 质量高 文件体积小 如果补帧时CPU并未瓶颈 请尽量选择CPU</span></p><p><span style=\" font-family:\'微软雅黑\',\'sans-serif\'; font-weight:600;\">硬件编码（NVENC/QSV）：</span><span style=\" font-family:\'微软雅黑\',\'sans-serif\';\">速度快 质量低 文件体积大 请酌情使用</span></p><p><span style=\" font-family:\'微软雅黑\',\'sans-serif\';\">如果在输出窗口遇到</span><span style=\" font-family:\'微软雅黑\',\'sans-serif\'; font-weight:600;\">Broken Pipe</span><span style=\" font-family:\'微软雅黑\',\'sans-serif\';\">错误，请选择CPU以使用软件编码</span></p></body></html>"))
        self.label_25.setText(_translate("MainWindow", "编码器：(?)"))
        self.HwaccelPresetSelector.setToolTip(_translate("MainWindow", "<html><head/><body><p>第几代N卡</p></body></html>"))
        self.HwaccelPresetSelector.setItemText(0, _translate("MainWindow", "None"))
        self.HwaccelPresetSelector.setItemText(1, _translate("MainWindow", "5th"))
        self.HwaccelPresetSelector.setItemText(2, _translate("MainWindow", "6th"))
        self.HwaccelPresetSelector.setItemText(3, _translate("MainWindow", "7th+"))
        self.KeepHeadFrameChecker.setToolTip(_translate("MainWindow", "<html><head/><body><p>在第一帧放入最后一帧以适配一些首尾相连循环的视频补帧</p></body></html>"))
        self.KeepHeadFrameChecker.setText(_translate("MainWindow", "首尾循环 (?)"))
        self.DeinterlaceChecker.setToolTip(_translate("MainWindow", "<html><head/><body><p>使用ffmpeg的YADIF滤镜对输入进行反交错</p><p><span style=\" font-weight:600;\">（仅支持视频输入）</span></p></body></html>"))
        self.DeinterlaceChecker.setText(_translate("MainWindow", "开启反交错 (!)"))
        self.EncodeAudioChecker.setToolTip(_translate("MainWindow", "<html><head/><body><p>将输入视频中的音轨全部二压为AAC格式， 640kbps，与当前所有输出格式兼容</p><p>若输出视频格式与输入视频格式不兼容，则推荐开启此选项。</p><p>如带有pcm的输入合并至mkv中</p></body></html>"))
        self.EncodeAudioChecker.setText(_translate("MainWindow", "音频二压为AAC (?)"))
        self.EncoderSelector.setItemText(0, _translate("MainWindow", "H264,8bit"))
        self.PresetReminder.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:600;\">slow或veryslow的压制质量已足够好，但速度慢</span></p><p>ll是NVIDIA硬件编码专用预设，代表low latency，低延迟，速度快，质量不高</p><p>hq是NVIDIA硬件编码和ProRes专用预设，代表high quality，相对高质量，但不会比slow高</p><p><span style=\" font-weight:600;\">PS：</span>选择HEVC/H265编码，压制预设选择fast或faster，会调用“者佬™快速编码预设”</p></body></html>"))
        self.PresetReminder.setText(_translate("MainWindow", "选择压制预设： (?)"))
        self.UseTargetBitrate.setToolTip(_translate("MainWindow", "<html><head/><body><p>目标码率，1pass下不代表实际码率</p><p>最终输出码率大概率低于目标码率，<span style=\" font-weight:600;\">请勿恐慌</span></p><p><span style=\" font-weight:600;\">如果想输出高码率，请使用ProRes编码（剪辑专用）</span></p></body></html>"))
        self.UseTargetBitrate.setText(_translate("MainWindow", "目标码率： (?)"))
        self.HwaccelPresetLabel.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:600;\">仅在使用NVENC编码器时生效</span></p><p>右为编码器辈数（请自行查阅自己显卡的NVENC辈数）</p><p>辈数越高，压缩率越好</p><p>如果使用此项报Broken Pipe错误，请尝试降级（如7th改为6th）或关闭（调为None）</p><p><span style=\" font-weight:600;\">恰当选择此项有望显著提高N卡硬编压制质量</span></p><p><span style=\" font-weight:600;\">选择方案请看附赠的NVIDIA NVENC Gen.pdf</span></p><p>GTX 1050+ 请选5th</p><p>GTX 1650+ 请选7th</p></body></html>"))
        self.HwaccelPresetLabel.setText(_translate("MainWindow", "N卡硬编预设：(?)"))
        self.OneClickHDRLabel.setToolTip(_translate("MainWindow", "<html><head/><body><p>使用者佬™ 一键HDR方案将SDR输入转为HDR10输出，峰值亮度1000，BT.2020色域</p></body></html>"))
        self.OneClickHDRLabel.setText(_translate("MainWindow", "一键HDR (?)"))
        self.OneClickHDRModeSelector.setItemText(0, _translate("MainWindow", "无"))
        self.OneClickHDRModeSelector.setItemText(1, _translate("MainWindow", "保留饱和度"))
        self.Bit16WorkflowChecker.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:600;\">推荐开启</span></p><p>全程使用16bit工作流，最大限度减轻色带，提高补帧画面精细程度，有效提升HDR视频补帧质量。建议搭配关闭快速拆帧以及硬件解码使用。</p><p><span style=\" font-weight:600;\">不适用于A卡模式</span></p></body></html>"))
        self.Bit16WorkflowChecker.setText(_translate("MainWindow", "高精度优化工作流 (!)"))
        self.UseCRF.setToolTip(_translate("MainWindow", "<html><head/><body><p>此值越小，输出文件码率越高，大小越大。</p><p>对于不同编码器，<span style=\" font-weight:600;\">视觉无损</span>的值不尽相同，16用于AVC/H264, 推荐值10</p></body></html>"))
        self.UseCRF.setText(_translate("MainWindow", "渲染质量CRF：(!)"))
        self.HDRModeLabel.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:600;\">指定输出的HDR模式</span></p><p>Auto为自动，检测到HDR内容会切换到CPU压制模式</p><p>CUSTOM HDR为自定义HDR，将根据用户指定的编码器处理HDR输出，不会写入HDR元数据（HDR10+、Dolby Vision不适用）</p><p>Dolby Vision，HDR10+仅支持倍帧补帧(24-&gt;48, 72fps, 24-x-&gt;60fps)，且不支持划分时间段补帧</p><p><span style=\" font-weight:600;\">如需要自行操作元数据（包括元数据的保留、迁移、修改，乃至对补帧输出二压，请选择CUSTOM HDR）</span></p><p><span style=\" font-weight:600;\">特别说明：</span></p><p><span style=\" font-weight:600;\">当编码器为CPU且输入为HDR10+源时，(libx265)渲染有可能出错，出错情况视机器环境而定</span></p><p>其余选项为手动指定输出为对应HDR模式</p></body></html>"))
        self.HDRModeLabel.setText(_translate("MainWindow", "源HDR (?)"))
        self.HDRModeSelector.setItemText(0, _translate("MainWindow", "Auto"))
        self.HDRModeSelector.setItemText(1, _translate("MainWindow", "Custom HDR"))
        self.HDRModeSelector.setItemText(2, _translate("MainWindow", "HDR10"))
        self.HDRModeSelector.setItemText(3, _translate("MainWindow", "HDR10+"))
        self.HDRModeSelector.setItemText(4, _translate("MainWindow", "Dolby Vision"))
        self.HDRModeSelector.setItemText(5, _translate("MainWindow", "HLG"))
        self.EncoderReminder.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:600;\">HEVC</span>：高效视频压制格式，用更低的码率获得更优的画面质量。对于配置较低的电脑，解码HEVC编码的视频可能会有困难。<span style=\" font-weight:600;\">4K、HDR、用于收藏的蓝光原盘等内容只推荐使用此编码</span></p><p><span style=\" font-weight:600;\">H264</span>：非常通用的压制编码，不推荐用于超高清内容（&gt;4K）</p><p><span style=\" font-weight:600;\">ProRes: </span>剪辑中间格式专用，如果你希望码率越大越好，选这个就完事了</p><p><span style=\" font-weight:600;\">8bit，10bit的区别：</span>自行百度，10bit可以有效除去画面色带</p><p><span style=\" font-weight:600;\">带透明通道的输出：</span>使用ProRes的yuv444p10le编码，但目前SVFI不支持透明通道补帧</p><p><span style=\" font-weight:600;\">推荐使用H265（预设为Fast）或ProRes进行压制</span></p></body></html>"))
        self.EncoderReminder.setText(_translate("MainWindow", "选择压制编码： (?)"))
        self.UseEncodeThread.setToolTip(_translate("MainWindow", "<html><head/><body><p>使用N个线程进行渲染</p><p><span style=\" font-weight:600;\">仅在CPU(ffmpeg)作为编码器下生效</span></p></body></html>"))
        self.UseEncodeThread.setText(_translate("MainWindow", "指定编码线程数 (?)"))
        self.HwaccelDecode.setToolTip(_translate("MainWindow", "<html><head/><body><p>使用硬件加速辅助解码，减小CPU解码负担，输入为4K分辨率时推荐开启</p><p><span style=\" font-weight:600;\">有可能产生颜色偏差及色带</span></p></body></html>"))
        self.HwaccelDecode.setText(_translate("MainWindow", "硬件解码 (!)"))
        self.UseAVX512Checker.setToolTip(_translate("MainWindow", "<html><head/><body><p>Use <span style=\" font-weight:600;\">AVX512</span> for CPU(ffmpeg) H.265/HEVC Encoding</p><p>Trade <span style=\" font-weight:600;\">PRETTY MUCH</span> CPU Performance for <span style=\" font-weight:600;\">10%</span> Enhancement of video</p></body></html>"))
        self.UseAVX512Checker.setText(_translate("MainWindow", "Use AVX512 (?)"))
        self.RenderSettingsLabel.setText(_translate("MainWindow", "渲染设置"))
        self.EncodeSettingsLabel.setText(_translate("MainWindow", "编码质量"))
        self.CustomRenderParamsLabel.setToolTip(_translate("MainWindow", "<html><head/><body><p>专业选项，必须输入和编码器对应的参数（FFmpeg、EnCc系列或SVT）</p><p>此参数将替换用于压制的部分参数，</p><p>参数之间用“||”间隔</p><p>e.g.</p><p>&quot;-x265-params||loseless=1 ||-preset:v||placebo&quot;</p><p>&quot;-an&quot;</p><p>&quot;-||-an&quot;</p></body></html>"))
        self.CustomRenderParamsLabel.setText(_translate("MainWindow", "自定义压制参数： (?)"))
        self.label_27.setText(_translate("MainWindow", "帧"))
        self.slowmotion.setToolTip(_translate("MainWindow", "<html><head/><body><p>使用指定帧率输出。效果等同于PR、AE的<span style=\" font-weight:600;\">时间重映射</span></p><p>输出将与右项帧率相同，输出时长与原视频时长的<span style=\" font-weight:600;\">比</span>等于左边的<span style=\" font-weight:600;\">输出帧率/该项帧率</span></p><p>e.g.</p><p>输出帧率=60fps</p><p>时间重映射帧率=30fps</p><p>最终输出将为30fps，时长为原输入的两倍</p></body></html>"))
        self.slowmotion.setWhatsThis(_translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:600;\">补帧帧率 = 输入帧率 * 补帧倍率</span></p></body></html>"))
        self.slowmotion.setText(_translate("MainWindow", "时间重映射： (?)"))
        self.label_26.setToolTip(_translate("MainWindow", "<html><head/><body><p>每一chunk的帧数大小</p><p><span style=\" font-weight:600;\">注意：</span></p><p><span style=\" font-weight:600;\">使用QSVENCC编码器时此值过高可能导致渲染卡死</span></p></body></html>"))
        self.label_26.setText(_translate("MainWindow", "单一输出区块大小： (!)"))
        self.SlowmotionFPS.setPlaceholderText(_translate("MainWindow", "输入被映射至的帧率"))
        self.FFmpegCustomer.setPlaceholderText(_translate("MainWindow", "如输入“-crf 9” 会替换渲染质量的值"))
        self.MBufferChecker.setToolTip(_translate("MainWindow", "<html><head/><body><p>使用指定的内存量进行补帧任务，避免内存不足，一般不需勾选。</p><p><span style=\" font-weight:600;\">专业人士自用</span></p></body></html>"))
        self.MBufferChecker.setText(_translate("MainWindow", "手动指定缓冲区内存大小： (?)"))
        self.toolBox.setItemText(self.toolBox.indexOf(self.RenderSettings), _translate("MainWindow", "输出质量设置"))
        self.label_34.setText(_translate("MainWindow", "补帧线程数"))
        self.SelectedGpuLabel.setToolTip(_translate("MainWindow", "<html><head/><body><p>在任务管理器中显示的从0计数的GPU</p></body></html>"))
        self.SelectedGpuLabel.setText(_translate("MainWindow", "选择的GPU (?)"))
        self.UseMultiCardsChecker.setToolTip(_translate("MainWindow", "<html><head/><body><p>使用所有能检测到的显卡进行补帧</p><p>使用A卡模式（左侧“使用A卡或核显”）将同时调用能识别到的A卡和N卡</p><p>不适用A卡模式则只能使用检测到的N卡</p><p>速度较单卡慢</p></body></html>"))
        self.UseMultiCardsChecker.setText(_translate("MainWindow", "使用多卡 (实验性功能) (?)"))
        self.AutoInterpScaleChecker.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:600;\">仅N卡可用</span></p><p>动态选择光流尺度，有效缓解物体消失问题</p><p>补帧速度将为动态，基于动态选择的光流尺度</p><p>一般情况下，最终耗时介于光流尺度0.5-1.0的耗时之间</p><p><span style=\" font-weight:600;\">推荐开启</span></p></body></html>"))
        self.AutoInterpScaleChecker.setText(_translate("MainWindow", "动态光流尺度 (?)"))
        self.label_32.setText(_translate("MainWindow", "用于补帧的N卡："))
        self.ForwardEnsembleChecker.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-family:\'微软雅黑\',\'sans-serif\'; font-weight:600;\">仅N卡部分模型可用</span></p><p><span style=\" font-family:\'微软雅黑\',\'sans-serif\';\">提高光流预测准确性</span></p><p><span style=\" font-family:\'微软雅黑\',\'sans-serif\';\">开启后可有效减轻虚影</span></p><p><span style=\" font-family:\'微软雅黑\',\'sans-serif\';\">速度减慢25%</span></p><p><span style=\" font-family:\'微软雅黑\',\'sans-serif\'; font-weight:600;\">2.x模型，anime模型，4.x模型不推荐开启</span></p><p><span style=\" font-family:\'微软雅黑\',\'sans-serif\'; font-weight:600;\">3.x模型强烈建议开启</span></p></body></html>"))
        self.ForwardEnsembleChecker.setText(_translate("MainWindow", "双向光流 (?)"))
        self.AutoInterpScaleReminder.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:600;\">该值不是越大或者越小越好</span></p><p>值越大速度越慢</p><p>推荐值32~128</p><p><span style=\" font-weight:600;\">[此功能尚在测试中]</span></p></body></html>"))
        self.AutoInterpScaleReminder.setText(_translate("MainWindow", "预测大小 (?)"))
        self.NcnnRifeSettingsLabel.setText(_translate("MainWindow", "A卡补帧参数"))
        self.label_2.setText(_translate("MainWindow", "输出文件名将带有反映上述设置的缩写"))
        self.InterlaceInferenceReminder.setToolTip(_translate("MainWindow", "<html><head/><body><p>利用下采样对输入进行间隔补帧，极大减少显存占用（成倍数降低）</p><p>会降低补帧速度，并可能导致画面出现轻微的条带状纹理</p><p><span style=\" font-weight:600;\">使用情景举例：4G以下显卡对4K输入补帧</span></p></body></html>"))
        self.InterlaceInferenceReminder.setText(_translate("MainWindow", "交错补帧 (?)"))
        self.ReverseChecker.setToolTip(_translate("MainWindow", "<html><head/><body><p>将前一张图片作为补帧的参考，<span style=\" font-weight:600;\">从后向前补</span>。</p><p>可能会比正向光流更流畅，建议针对不同素材自行进行多次测试</p></body></html>"))
        self.ReverseChecker.setText(_translate("MainWindow", "反向光流 (?)"))
        self.TtaModeLabel.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-family:\'-apple-system\',\'BlinkMacSystemFont\',\'Helvetica Neue\',\'PingFang SC\',\'Microsoft YaHei\',\'Source Han Sans SC\',\'Noto Sans CJK SC\',\'WenQuanYi Micro Hei\',\'sans-serif\'; font-size:15px; font-weight:600; color:#121212; background-color:#ffffff;\">TTA：Train Time Augmentation，训练数据增强</span></p><p><span style=\" font-family:\'-apple-system\',\'BlinkMacSystemFont\',\'Helvetica Neue\',\'PingFang SC\',\'Microsoft YaHei\',\'Source Han Sans SC\',\'Noto Sans CJK SC\',\'WenQuanYi Micro Hei\',\'sans-serif\'; font-size:15px; font-weight:600; color:#121212; background-color:#ffffff;\">会增加补帧时间以换取更好的补帧效果：如减弱果冻、小目标消失的问题</span></p><p><span style=\" font-family:\'-apple-system\',\'BlinkMacSystemFont\',\'Helvetica Neue\',\'PingFang SC\',\'Microsoft YaHei\',\'Source Han Sans SC\',\'Noto Sans CJK SC\',\'WenQuanYi Micro Hei\',\'sans-serif\'; font-size:15px; color:#121212; background-color:#ffffff;\">设不开启TTA所需计算量为1，旁边的</span><span style=\" font-family:\'-apple-system\',\'BlinkMacSystemFont\',\'Helvetica Neue\',\'PingFang SC\',\'Microsoft YaHei\',\'Source Han Sans SC\',\'Noto Sans CJK SC\',\'WenQuanYi Micro Hei\',\'sans-serif\'; font-size:15px; font-weight:600; color:#121212; background-color:#ffffff;\">数值输入框</span><span style=\" font-family:\'-apple-system\',\'BlinkMacSystemFont\',\'Helvetica Neue\',\'PingFang SC\',\'Microsoft YaHei\',\'Source Han Sans SC\',\'Noto Sans CJK SC\',\'WenQuanYi Micro Hei\',\'sans-serif\'; font-size:15px; color:#121212; background-color:#ffffff;\">的值为t：</span></p><p><span style=\" font-family:\'-apple-system\',\'BlinkMacSystemFont\',\'Helvetica Neue\',\'PingFang SC\',\'Microsoft YaHei\',\'Source Han Sans SC\',\'Noto Sans CJK SC\',\'WenQuanYi Micro Hei\',\'sans-serif\'; font-size:15px; color:#121212; background-color:#ffffff;\">三种模式：</span></p><p><span style=\" font-family:\'-apple-system\',\'BlinkMacSystemFont\',\'Helvetica Neue\',\'PingFang SC\',\'Microsoft YaHei\',\'Source Han Sans SC\',\'Noto Sans CJK SC\',\'WenQuanYi Micro Hei\',\'sans-serif\'; font-size:15px; color:#121212; background-color:#ffffff;\">1. 侧向TTA，计算量为2t + 1；</span></p><p><span style=\" font-family:\'-apple-system\',\'BlinkMacSystemFont\',\'Helvetica Neue\',\'PingFang SC\',\'Microsoft YaHei\',\'Source Han Sans SC\',\'Noto Sans CJK SC\',\'WenQuanYi Micro Hei\',\'sans-serif\'; font-size:15px; color:#121212; background-color:#ffffff;\">2. 中向TTA，计算量为2t + 2；</span></p><p><span style=\" font-family:\'-apple-system\',\'BlinkMacSystemFont\',\'Helvetica Neue\',\'PingFang SC\',\'Microsoft YaHei\',\'Source Han Sans SC\',\'Noto Sans CJK SC\',\'WenQuanYi Micro Hei\',\'sans-serif\'; font-size:15px; color:#121212; background-color:#ffffff;\">3. 综合TTA = 侧向TTA + 中向TTA，计算量为4t + 3</span></p><p><span style=\" font-family:\'-apple-system\',\'BlinkMacSystemFont\',\'Helvetica Neue\',\'PingFang SC\',\'Microsoft YaHei\',\'Source Han Sans SC\',\'Noto Sans CJK SC\',\'WenQuanYi Micro Hei\',\'sans-serif\'; font-size:15px; font-weight:600; color:#121212; background-color:#ffffff;\">注意：</span></p><p><span style=\" font-family:\'-apple-system\',\'BlinkMacSystemFont\',\'Helvetica Neue\',\'PingFang SC\',\'Microsoft YaHei\',\'Source Han Sans SC\',\'Noto Sans CJK SC\',\'WenQuanYi Micro Hei\',\'sans-serif\'; font-size:15px; color:#121212; background-color:#ffffff;\">开启TTA会降低画面锐度，推荐用于2D动画补帧</span></p><p><span style=\" font-family:\'-apple-system\',\'BlinkMacSystemFont\',\'Helvetica Neue\',\'PingFang SC\',\'Microsoft YaHei\',\'Source Han Sans SC\',\'Noto Sans CJK SC\',\'WenQuanYi Micro Hei\',\'sans-serif\'; font-size:15px; font-weight:600; color:#121212; background-color:#ffffff;\">TTA极其耗时，请谨慎使用</span></p></body></html>"))
        self.TtaModeLabel.setText(_translate("MainWindow", "TTA模式 (?)"))
        self.InterpScaleReminder.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:600;\">该值不是越大或者越小越好</span></p><p>1080P动漫推荐<span style=\" font-weight:600;\">0.5</span>，实拍推荐<span style=\" font-weight:600;\">1.0</span></p><p>分辨率4K及以上的视频推荐<span style=\" font-weight:600;\">0.25~0.5</span></p><p><span style=\" font-weight:600;\">其余推荐1.0</span></p><p><span style=\" font-weight:600;\">若输出画面果冻较多，请增加光流尺度</span></p><p><span style=\" font-weight:600;\">若画面内容小目标物件（如运动的小型球状物体）消失较多，请降低光流尺度</span></p></body></html>"))
        self.InterpScaleReminder.setText(_translate("MainWindow", "光流尺度 (!)"))
        self.FP16Checker.setToolTip(_translate("MainWindow", "<html><head/><body><p>仅对N卡生效，节省显存使用量，但可能带来画面抖动</p><p><span style=\" font-weight:600;\">3.x、4.x模型开启此项将导致4K输出花屏</span></p></body></html>"))
        self.FP16Checker.setText(_translate("MainWindow", "半精度模式 (!)"))
        self.InterpScaleSelector.setCurrentText(_translate("MainWindow", "1.00"))
        self.InterpScaleSelector.setItemText(0, _translate("MainWindow", "1.00"))
        self.InterpScaleSelector.setItemText(1, _translate("MainWindow", "0.125"))
        self.InterpScaleSelector.setItemText(2, _translate("MainWindow", "0.25"))
        self.InterpScaleSelector.setItemText(3, _translate("MainWindow", "0.50"))
        self.InterpScaleSelector.setItemText(4, _translate("MainWindow", "2.00"))
        self.InterpScaleSelector.setItemText(5, _translate("MainWindow", "4.00"))
        self.label_31.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:600;\">版本号越高代表模型越新</span></p><p>official：<span style=\" font-weight:600;\">官方</span>发布模型</p><p>anime smooth：自训练<span style=\" font-weight:600;\">动漫模型</span>，模糊但动作连贯</p><p>anime sharp：自训练动漫模型，效果更清晰</p><p>official 2.3 速度较慢,但是效果最稳定</p><p>official 3.x 速度快，但是效果略差</p><p>双向光流为3.x系列模型专属，少许降低速度，极大提升效果（强烈建议开启）</p><p>official 4.x 速度快，效果清晰</p></body></html>"))
        self.label_31.setText(_translate("MainWindow", "使用的补帧模型 (?)"))
        self.TtaModeSelector.setCurrentText(_translate("MainWindow", "None"))
        self.TtaModeSelector.setItemText(0, _translate("MainWindow", "None"))
        self.TtaModeSelector.setItemText(1, _translate("MainWindow", "侧向TTA"))
        self.TtaModeSelector.setItemText(2, _translate("MainWindow", "中向TTA"))
        self.TtaModeSelector.setItemText(3, _translate("MainWindow", "综合TTA"))
        self.EvictFlickerChecker.setToolTip(_translate("MainWindow", "<html><head/><body><p>由于补帧模型会导致输出帧亮度变化导致画面闪烁，</p><p>勾选此项以将输入帧做相同处理，以消除亮度影响</p><p><span style=\" font-weight:600;\">会增加计算量与耗时</span></p></body></html>"))
        self.EvictFlickerChecker.setText(_translate("MainWindow", "消除闪烁 (?)"))
        self.InterlaceInferenceChecker.setItemText(0, _translate("MainWindow", "None"))
        self.InterlaceInferenceChecker.setItemText(1, _translate("MainWindow", "1/2"))
        self.InterlaceInferenceChecker.setItemText(2, _translate("MainWindow", "1/4"))
        self.InterlaceInferenceChecker.setItemText(3, _translate("MainWindow", "1/8"))
        self.InterlaceInferenceChecker.setItemText(4, _translate("MainWindow", "1/16"))
        self.InterlaceInferenceChecker.setItemText(5, _translate("MainWindow", "1/32"))
        self.InterlaceInferenceChecker.setItemText(6, _translate("MainWindow", "1/64"))
        self.NvidiaRifeSettingsLabel.setText(_translate("MainWindow", "N卡补帧参数"))
        self.GlobalRifeSettingsLabel.setText(_translate("MainWindow", "全局补帧参数"))
        self.toolBox.setItemText(self.toolBox.indexOf(self.RIFESettings), _translate("MainWindow", "补帧设置"))
        self.SettingsPresetBox.setToolTip(_translate("MainWindow", "<html><head/><body><p>保存设置预设</p><p><br/></p><p><span style=\" font-weight:600;\">仅供专业版/内测版</span></p></body></html>"))
        self.AddTemplateButton.setText(_translate("MainWindow", "基于当前设置新建预设"))
        self.RemoveTemplateButton.setText(_translate("MainWindow", "移除当前预设"))
        self.EditTemplateName.setPlaceholderText(_translate("MainWindow", "给预设起个好听的名字~"))
        self.UseTemplateButton.setText(_translate("MainWindow", "应用指定预设"))
        self.toolBox.setItemText(self.toolBox.indexOf(self.page), _translate("MainWindow", "自定义预设栏"))
        self.GIFLabel.setToolTip(_translate("MainWindow", "<html><head/><body><p>生成高质量GIF图</p><p><span style=\" font-weight:600;\">仅供专业版/内测版</span></p></body></html>"))
        self.GIFLabel.setText(_translate("MainWindow", "视频转GIF动图(?)"))
        self.GifInput.setPlaceholderText(_translate("MainWindow", "输入视频路径"))
        self.GifButton.setText(_translate("MainWindow", "GIF制作"))
        self.GifOutput.setPlaceholderText(_translate("MainWindow", "输出动图(gif)路径"))
        self.GifLoopChecker.setText(_translate("MainWindow", "循环动图"))
        self.ConcatAllButton.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:600;\">当任务中途失败或合并失败时，若需要将渲染子块(chunk)合并为视频文件，请使用此按钮</span></p><p>将左侧任务输入框<span style=\" font-weight:600;\">选中的任务条目</span>对应的<span style=\" font-weight:600;\">输出项目文件夹</span>内的渲染子块(<span style=\" font-weight:600;\">chunk</span>)合并为视频</p><p><span style=\" font-weight:600;\">注意事项：</span></p><p>1. 输出项目文件夹所在磁盘必须处于活动状态中，否则将报“未找到输入或输出文件错误”</p><p>2. 任务条目id必须与输出项目文件夹的id相同，项目文件夹名称结尾以“_”间隔的后一字符串即为任务id</p><p>3. <span style=\" font-weight:600;\">输出为图片序列</span>必须处于未选中状态</p></body></html>"))
        self.ConcatAllButton.setText(_translate("MainWindow", "合并已有区块 (!)"))
        self.ConcatInputV.setPlaceholderText(_translate("MainWindow", "输入视频路径"))
        self.ConcatInputA.setPlaceholderText(_translate("MainWindow", "输入音频路径（视频）"))
        self.OutputConcat.setPlaceholderText(_translate("MainWindow", "输出视频路径"))
        self.ConcatButton.setText(_translate("MainWindow", "音视频合并"))
        self.ToolBoxEncodeAudioChecker.setToolTip(_translate("MainWindow", "<html><head/><body><p>音视频合并时，将音轨二压为AAC 640kbps</p></body></html>"))
        self.ToolBoxEncodeAudioChecker.setText(_translate("MainWindow", "音频二压为AAC (?)"))
        self.ConcatLabel.setToolTip(_translate("MainWindow", "<html><head/><body><p>将下方“输入视频路径”所指素材的第一视频轨</p><p>与“输入音频路径（视频）”所指素材的第一音频轨</p><p>合并输出至“输出视频路径”，<span style=\" font-weight:600;\">三个输入框均要求填写完整路径名</span></p></body></html>"))
        self.ConcatLabel.setText(_translate("MainWindow", "音视频合并 (?)"))
        self.toolBox.setItemText(self.toolBox.indexOf(self.ToolBox), _translate("MainWindow", "工具箱"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.step1), _translate("MainWindow", "首页"))
        self.KillProcButton.setText(_translate("MainWindow", "强制结束补帧进程"))
        self.PauseProcess.setText(_translate("MainWindow", "暂停补帧"))
        self.OptionCheck.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'SimSun\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.OutputGuideLabel.setText(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'SimSun\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'微软雅黑\',\'sans-serif\'; font-size:12pt; font-weight:600; color:#ffffff;\">输出窗口</span><span style=\" font-family:\'微软雅黑\',\'sans-serif\'; font-size:12pt; color:#ffffff;\">页面，字体的不同颜色意义如下：</span> </p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'微软雅黑\',\'sans-serif\'; font-size:10pt; font-weight:600; color:#ff0000;\">红色——错误，程序无法正常完成，请在首页导出当前设置并对输出界面截图，并在Steam讨论社区发布求助帖。开发人员将会在48h内对帖子进行回复。</span> </p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'微软雅黑\',\'sans-serif\'; font-size:10pt; font-weight:600; color:#ffaa00;\">橙色——警告，可能会影响最终画面效果，但不影响程序完成</span></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'微软雅黑\',\'sans-serif\'; font-size:10pt; font-weight:600; color:#ffaa00;\"><br /></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'微软雅黑\',\'sans-serif\'; font-size:10pt; font-weight:600; color:#00aa00;\">绿色——当前任务完成</span></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'微软雅黑\',\'sans-serif\'; font-size:10pt; font-weight:600; color:#00aa00;\"><br /></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'微软雅黑\',\'sans-serif\'; font-size:10pt; font-weight:600; color:#ffffff;\">若输出为视频，则程序将会先输出若干个子块(chunk)，补帧完成后程序将会合并这些子块为一个文件，可以通过查看chunk文件的方式来确认最终效果</span></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'微软雅黑\',\'sans-serif\'; font-size:10pt; font-weight:600; color:#ffffff;\"><br /></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'微软雅黑\',\'sans-serif\'; font-size:10pt; font-weight:600; color:#ffffff;\">若程序卡死，请点击右上角的强制结束进程按钮，并重新启动补帧程序！</span></p></body></html>"))
        self.label_17.setText(_translate("MainWindow", "总完成进度"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.step3), _translate("MainWindow", "输出"))
        self.menu.setTitle(_translate("MainWindow", "设置"))
        self.menu_2.setTitle(_translate("MainWindow", "启动"))
        self.menuAboutSVFI.setTitle(_translate("MainWindow", "帮助"))
        self.menu_3.setTitle(_translate("MainWindow", "Language"))
        self.actionImportVideos.setText(_translate("MainWindow", "导入文件"))
        self.actionImportVideos.setShortcut(_translate("MainWindow", "Ctrl+I"))
        self.actionClearVideo.setText(_translate("MainWindow", "清除所选的导入项"))
        self.actionClearVideo.setShortcut(_translate("MainWindow", "Del"))
        self.actionClearAllVideos.setText(_translate("MainWindow", "清除所有导入"))
        self.actionClearAllVideos.setShortcut(_translate("MainWindow", "Ctrl+Del"))
        self.actionPreferences.setText(_translate("MainWindow", "偏好设置"))
        self.actionPreferences.setShortcut(_translate("MainWindow", "Ctrl+P"))
        self.actionQuit.setText(_translate("MainWindow", "退出程序"))
        self.actionQuit.setShortcut(_translate("MainWindow", "Ctrl+Q"))
        self.actionStartProcess.setText(_translate("MainWindow", "启动补帧程序"))
        self.actionStartProcess.setShortcut(_translate("MainWindow", "Ctrl+Return"))
        self.actionSelect_Start_Frames.setText(_translate("MainWindow", "Select Start Frames"))
        self.actionSelect_End_Frames.setText(_translate("MainWindow", "Select End Frames"))
        self.actionSaveSettings.setText(_translate("MainWindow", "保存当前设置"))
        self.actionSaveSettings.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.actionLoadDefaultSettings.setText(_translate("MainWindow", "载入默认设置"))
        self.actionLoadDefaultSettings.setShortcut(_translate("MainWindow", "Ctrl+Alt+L"))
        self.actionErrorLog.setText(_translate("MainWindow", "错误日志"))
        self.actionGetSupport.setText(_translate("MainWindow", "获取帮助"))
        self.actionManualGuide.setText(_translate("MainWindow", "快速教程"))
        self.actionAbout.setText(_translate("MainWindow", "关于SVFI"))
        self.actionStopProcess.setText(_translate("MainWindow", "终止当前任务"))
        self.actionStopProcess.setShortcut(_translate("MainWindow", "Ctrl+End"))
        self.actionLangZH.setText(_translate("MainWindow", "简体中文"))
        self.actionLangEN.setText(_translate("MainWindow", "English"))
        self.actionBack2Home.setText(_translate("MainWindow", "回到首页"))
        self.actionBack2Home.setShortcut(_translate("MainWindow", "Ctrl+H"))
        self.actionBack2Output.setText(_translate("MainWindow", "回到输出界面"))
        self.actionBack2Output.setShortcut(_translate("MainWindow", "Ctrl+Shift+O"))
        self.actionStartRenderProcess.setText(_translate("MainWindow", "启动压制程序"))
        self.actionStartRenderProcess.setShortcut(_translate("MainWindow", "Ctrl+E"))
        self.actionStartExtractProcess.setText(_translate("MainWindow", "启动拆帧程序"))
        self.actionStartExtractProcess.setShortcut(_translate("MainWindow", "Ctrl+U"))
from Utils.RIFE_GUI_Custom import MyComboBox, MyDoubleSpinBox, MyLineWidget, MyListWidget, MySpinBox, MyTextWidget
